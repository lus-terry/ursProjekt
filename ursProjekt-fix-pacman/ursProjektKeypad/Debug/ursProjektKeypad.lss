
ursProjektKeypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000011e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001f0  00800060  000011e4  00001278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000084  00800250  00800250  00001468  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001468  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001498  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  000014d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024c4  00000000  00000000  00001674  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ea1  00000000  00000000  00003b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001402  00000000  00000000  000049d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000038c  00000000  00000000  00005ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a7  00000000  00000000  00006168  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010e4  00000000  00000000  0000680f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  000078f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ee       	ldi	r30, 0xE4	; 228
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 35       	cpi	r26, 0x50	; 80
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	a0 e5       	ldi	r26, 0x50	; 80
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3d       	cpi	r26, 0xD4	; 212
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <main>
      8a:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <pokaziBodove>:
int prevPacmany = 0;
int score = 0;
int tmpSeconds = 0;


void pokaziBodove() {
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
	lcd_clrscr();
      96:	0e 94 1e 05 	call	0xa3c	; 0xa3c <lcd_clrscr>
	lcd_gotoxy(0, 0);
      9a:	60 e0       	ldi	r22, 0x00	; 0
      9c:	80 e0       	ldi	r24, 0x00	; 0
      9e:	0e 94 14 05 	call	0xa28	; 0xa28 <lcd_gotoxy>
	lcd_puts("Vasi bodovi: ");
      a2:	87 e2       	ldi	r24, 0x27	; 39
      a4:	91 e0       	ldi	r25, 0x01	; 1
      a6:	0e 94 37 05 	call	0xa6e	; 0xa6e <lcd_puts>
	
		lcd_putc('0' + (score / 10));
      aa:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <score>
      ae:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <score+0x1>
      b2:	ca e0       	ldi	r28, 0x0A	; 10
      b4:	d0 e0       	ldi	r29, 0x00	; 0
      b6:	be 01       	movw	r22, r28
      b8:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__divmodhi4>
      bc:	80 e3       	ldi	r24, 0x30	; 48
      be:	86 0f       	add	r24, r22
      c0:	0e 94 22 05 	call	0xa44	; 0xa44 <lcd_putc>
		lcd_putc('0' + (score % 10));
      c4:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <score>
      c8:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <score+0x1>
      cc:	be 01       	movw	r22, r28
      ce:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__divmodhi4>
      d2:	80 5d       	subi	r24, 0xD0	; 208
      d4:	0e 94 22 05 	call	0xa44	; 0xa44 <lcd_putc>
}
      d8:	df 91       	pop	r29
      da:	cf 91       	pop	r28
      dc:	08 95       	ret

000000de <gameOverPacman>:

void gameOverPacman() {
	lcd_clrscr();
      de:	0e 94 1e 05 	call	0xa3c	; 0xa3c <lcd_clrscr>
	lcd_puts("Vrijeme je isteklo");
      e2:	85 e3       	ldi	r24, 0x35	; 53
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	0e 94 37 05 	call	0xa6e	; 0xa6e <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ea:	2f ef       	ldi	r18, 0xFF	; 255
      ec:	8f e7       	ldi	r24, 0x7F	; 127
      ee:	96 e1       	ldi	r25, 0x16	; 22
      f0:	21 50       	subi	r18, 0x01	; 1
      f2:	80 40       	sbci	r24, 0x00	; 0
      f4:	90 40       	sbci	r25, 0x00	; 0
      f6:	e1 f7       	brne	.-8      	; 0xf0 <gameOverPacman+0x12>
      f8:	00 c0       	rjmp	.+0      	; 0xfa <gameOverPacman+0x1c>
      fa:	00 00       	nop
	
	_delay_ms(1000);
	pokaziBodove();
      fc:	0e 94 49 00 	call	0x92	; 0x92 <pokaziBodove>
     100:	2f ef       	ldi	r18, 0xFF	; 255
     102:	8f e7       	ldi	r24, 0x7F	; 127
     104:	93 e4       	ldi	r25, 0x43	; 67
     106:	21 50       	subi	r18, 0x01	; 1
     108:	80 40       	sbci	r24, 0x00	; 0
     10a:	90 40       	sbci	r25, 0x00	; 0
     10c:	e1 f7       	brne	.-8      	; 0x106 <gameOverPacman+0x28>
     10e:	00 c0       	rjmp	.+0      	; 0x110 <gameOverPacman+0x32>
     110:	00 00       	nop
     112:	08 95       	ret

00000114 <bodovi>:
	_delay_ms(3000);
	return;
}

void bodovi(int dots1[10], int pacy, int n) {
	for (int i = 0; i < n; i++) {
     114:	20 e0       	ldi	r18, 0x00	; 0
     116:	30 e0       	ldi	r19, 0x00	; 0
     118:	19 c0       	rjmp	.+50     	; 0x14c <bodovi+0x38>
		if (dots1[i] == pacy){
     11a:	f9 01       	movw	r30, r18
     11c:	ee 0f       	add	r30, r30
     11e:	ff 1f       	adc	r31, r31
     120:	e8 0f       	add	r30, r24
     122:	f9 1f       	adc	r31, r25
     124:	a0 81       	ld	r26, Z
     126:	b1 81       	ldd	r27, Z+1	; 0x01
     128:	a6 17       	cp	r26, r22
     12a:	b7 07       	cpc	r27, r23
     12c:	69 f4       	brne	.+26     	; 0x148 <bodovi+0x34>
			//red1[dots1[i]] = pacman;
			dots1[i] = 50;
     12e:	a2 e3       	ldi	r26, 0x32	; 50
     130:	b0 e0       	ldi	r27, 0x00	; 0
     132:	b1 83       	std	Z+1, r27	; 0x01
     134:	a0 83       	st	Z, r26
			score++;
     136:	e0 91 52 02 	lds	r30, 0x0252	; 0x800252 <score>
     13a:	f0 91 53 02 	lds	r31, 0x0253	; 0x800253 <score+0x1>
     13e:	31 96       	adiw	r30, 0x01	; 1
     140:	f0 93 53 02 	sts	0x0253, r31	; 0x800253 <score+0x1>
     144:	e0 93 52 02 	sts	0x0252, r30	; 0x800252 <score>
	_delay_ms(3000);
	return;
}

void bodovi(int dots1[10], int pacy, int n) {
	for (int i = 0; i < n; i++) {
     148:	2f 5f       	subi	r18, 0xFF	; 255
     14a:	3f 4f       	sbci	r19, 0xFF	; 255
     14c:	24 17       	cp	r18, r20
     14e:	35 07       	cpc	r19, r21
     150:	24 f3       	brlt	.-56     	; 0x11a <bodovi+0x6>
			//red1[dots1[i]] = pacman;
			dots1[i] = 50;
			score++;
		}	
	}
}
     152:	08 95       	ret

00000154 <mainScreenPacman>:


void mainScreenPacman() {
	lcd_clrscr();
     154:	0e 94 1e 05 	call	0xa3c	; 0xa3c <lcd_clrscr>
	lcd_gotoxy(0, 0);
     158:	60 e0       	ldi	r22, 0x00	; 0
     15a:	80 e0       	ldi	r24, 0x00	; 0
     15c:	0e 94 14 05 	call	0xa28	; 0xa28 <lcd_gotoxy>
	lcd_puts(red1);
     160:	82 ea       	ldi	r24, 0xA2	; 162
     162:	92 e0       	ldi	r25, 0x02	; 2
     164:	0e 94 37 05 	call	0xa6e	; 0xa6e <lcd_puts>
	lcd_gotoxy(0, 1);
     168:	61 e0       	ldi	r22, 0x01	; 1
     16a:	80 e0       	ldi	r24, 0x00	; 0
     16c:	0e 94 14 05 	call	0xa28	; 0xa28 <lcd_gotoxy>
	lcd_puts(red2);	
     170:	8a e7       	ldi	r24, 0x7A	; 122
     172:	92 e0       	ldi	r25, 0x02	; 2
     174:	0e 94 37 05 	call	0xa6e	; 0xa6e <lcd_puts>
     178:	2f ef       	ldi	r18, 0xFF	; 255
     17a:	8f e3       	ldi	r24, 0x3F	; 63
     17c:	92 e0       	ldi	r25, 0x02	; 2
     17e:	21 50       	subi	r18, 0x01	; 1
     180:	80 40       	sbci	r24, 0x00	; 0
     182:	90 40       	sbci	r25, 0x00	; 0
     184:	e1 f7       	brne	.-8      	; 0x17e <mainScreenPacman+0x2a>
     186:	00 c0       	rjmp	.+0      	; 0x188 <mainScreenPacman+0x34>
     188:	00 00       	nop
     18a:	08 95       	ret

0000018c <smjer>:
}

void smjer(char direction) {
	
	
	prevPacmanx = posPacmanx;
     18c:	20 91 5a 02 	lds	r18, 0x025A	; 0x80025a <posPacmanx>
     190:	30 91 5b 02 	lds	r19, 0x025B	; 0x80025b <posPacmanx+0x1>
     194:	30 93 57 02 	sts	0x0257, r19	; 0x800257 <prevPacmanx+0x1>
     198:	20 93 56 02 	sts	0x0256, r18	; 0x800256 <prevPacmanx>
	prevPacmany = posPacmany;
     19c:	40 91 58 02 	lds	r20, 0x0258	; 0x800258 <posPacmany>
     1a0:	50 91 59 02 	lds	r21, 0x0259	; 0x800259 <posPacmany+0x1>
     1a4:	50 93 55 02 	sts	0x0255, r21	; 0x800255 <prevPacmany+0x1>
     1a8:	40 93 54 02 	sts	0x0254, r20	; 0x800254 <prevPacmany>
	
	if (PIND & _BV(5)){
     1ac:	85 9b       	sbis	0x10, 5	; 16
     1ae:	10 c0       	rjmp	.+32     	; 0x1d0 <smjer+0x44>
		direction = '4';
		posPacmany--;
     1b0:	ca 01       	movw	r24, r20
     1b2:	01 97       	sbiw	r24, 0x01	; 1
     1b4:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <posPacmany+0x1>
     1b8:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <posPacmany>
		if (posPacmany == -1)
     1bc:	01 96       	adiw	r24, 0x01	; 1
     1be:	e1 f5       	brne	.+120    	; 0x238 <__EEPROM_REGION_LENGTH__+0x38>
		{
			posPacmany = 15;
     1c0:	8f e0       	ldi	r24, 0x0F	; 15
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <posPacmany+0x1>
     1c8:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <posPacmany>
	
	prevPacmanx = posPacmanx;
	prevPacmany = posPacmany;
	
	if (PIND & _BV(5)){
		direction = '4';
     1cc:	84 e3       	ldi	r24, 0x34	; 52
     1ce:	3b c0       	rjmp	.+118    	; 0x246 <__EEPROM_REGION_LENGTH__+0x46>
		if (posPacmany == -1)
		{
			posPacmany = 15;
		}
	}
	else if (PIND & _BV(7)){
     1d0:	87 9b       	sbis	0x10, 7	; 16
     1d2:	0e c0       	rjmp	.+28     	; 0x1f0 <smjer+0x64>
		direction = '6';
		posPacmany++;
     1d4:	ca 01       	movw	r24, r20
     1d6:	01 96       	adiw	r24, 0x01	; 1
     1d8:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <posPacmany+0x1>
     1dc:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <posPacmany>
		if (posPacmany == 16)
     1e0:	40 97       	sbiw	r24, 0x10	; 16
     1e2:	61 f5       	brne	.+88     	; 0x23c <__EEPROM_REGION_LENGTH__+0x3c>
		{
			posPacmany = 0;
     1e4:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <posPacmany+0x1>
     1e8:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <posPacmany>
		{
			posPacmany = 15;
		}
	}
	else if (PIND & _BV(7)){
		direction = '6';
     1ec:	86 e3       	ldi	r24, 0x36	; 54
     1ee:	2b c0       	rjmp	.+86     	; 0x246 <__EEPROM_REGION_LENGTH__+0x46>
		if (posPacmany == 16)
		{
			posPacmany = 0;
		}
	}
	else if (PIND & _BV(6)){
     1f0:	86 9b       	sbis	0x10, 6	; 16
     1f2:	0f c0       	rjmp	.+30     	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
		direction = '2';
		posPacmanx++;
     1f4:	2f 5f       	subi	r18, 0xFF	; 255
     1f6:	3f 4f       	sbci	r19, 0xFF	; 255
     1f8:	30 93 5b 02 	sts	0x025B, r19	; 0x80025b <posPacmanx+0x1>
     1fc:	20 93 5a 02 	sts	0x025A, r18	; 0x80025a <posPacmanx>
		if (posPacmanx == 2)
     200:	22 30       	cpi	r18, 0x02	; 2
     202:	31 05       	cpc	r19, r1
     204:	e9 f4       	brne	.+58     	; 0x240 <__EEPROM_REGION_LENGTH__+0x40>
		{
			posPacmanx = 0;
     206:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <posPacmanx+0x1>
     20a:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <posPacmanx>
		{
			posPacmany = 0;
		}
	}
	else if (PIND & _BV(6)){
		direction = '2';
     20e:	82 e3       	ldi	r24, 0x32	; 50
     210:	1a c0       	rjmp	.+52     	; 0x246 <__EEPROM_REGION_LENGTH__+0x46>
		if (posPacmanx == 2)
		{
			posPacmanx = 0;
		}
	}
	else if (PIND & _BV(4)){
     212:	84 9b       	sbis	0x10, 4	; 16
     214:	18 c0       	rjmp	.+48     	; 0x246 <__EEPROM_REGION_LENGTH__+0x46>
		direction = '8';
		posPacmanx--;
     216:	21 50       	subi	r18, 0x01	; 1
     218:	31 09       	sbc	r19, r1
     21a:	30 93 5b 02 	sts	0x025B, r19	; 0x80025b <posPacmanx+0x1>
     21e:	20 93 5a 02 	sts	0x025A, r18	; 0x80025a <posPacmanx>
		if (posPacmanx == -1)
     222:	2f 3f       	cpi	r18, 0xFF	; 255
     224:	3f 4f       	sbci	r19, 0xFF	; 255
     226:	71 f4       	brne	.+28     	; 0x244 <__EEPROM_REGION_LENGTH__+0x44>
		{
			posPacmanx = 2;
     228:	82 e0       	ldi	r24, 0x02	; 2
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <posPacmanx+0x1>
     230:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <posPacmanx>
		{
			posPacmanx = 0;
		}
	}
	else if (PIND & _BV(4)){
		direction = '8';
     234:	88 e3       	ldi	r24, 0x38	; 56
     236:	07 c0       	rjmp	.+14     	; 0x246 <__EEPROM_REGION_LENGTH__+0x46>
	
	prevPacmanx = posPacmanx;
	prevPacmany = posPacmany;
	
	if (PIND & _BV(5)){
		direction = '4';
     238:	84 e3       	ldi	r24, 0x34	; 52
     23a:	05 c0       	rjmp	.+10     	; 0x246 <__EEPROM_REGION_LENGTH__+0x46>
		{
			posPacmany = 15;
		}
	}
	else if (PIND & _BV(7)){
		direction = '6';
     23c:	86 e3       	ldi	r24, 0x36	; 54
     23e:	03 c0       	rjmp	.+6      	; 0x246 <__EEPROM_REGION_LENGTH__+0x46>
		{
			posPacmany = 0;
		}
	}
	else if (PIND & _BV(6)){
		direction = '2';
     240:	82 e3       	ldi	r24, 0x32	; 50
     242:	01 c0       	rjmp	.+2      	; 0x246 <__EEPROM_REGION_LENGTH__+0x46>
		{
			posPacmanx = 0;
		}
	}
	else if (PIND & _BV(4)){
		direction = '8';
     244:	88 e3       	ldi	r24, 0x38	; 56
			posPacmanx = 2;
		}
	}
	
	
	if ((!posPacmanx) && (direction == '4' || direction == '6')){
     246:	20 91 5a 02 	lds	r18, 0x025A	; 0x80025a <posPacmanx>
     24a:	30 91 5b 02 	lds	r19, 0x025B	; 0x80025b <posPacmanx+0x1>
     24e:	21 15       	cp	r18, r1
     250:	31 05       	cpc	r19, r1
     252:	a1 f4       	brne	.+40     	; 0x27c <__EEPROM_REGION_LENGTH__+0x7c>
     254:	84 33       	cpi	r24, 0x34	; 52
     256:	11 f0       	breq	.+4      	; 0x25c <__EEPROM_REGION_LENGTH__+0x5c>
     258:	86 33       	cpi	r24, 0x36	; 54
     25a:	81 f4       	brne	.+32     	; 0x27c <__EEPROM_REGION_LENGTH__+0x7c>
		
		red1[posPacmany] = pacman;
     25c:	e0 91 58 02 	lds	r30, 0x0258	; 0x800258 <posPacmany>
     260:	f0 91 59 02 	lds	r31, 0x0259	; 0x800259 <posPacmany+0x1>
     264:	ee 55       	subi	r30, 0x5E	; 94
     266:	fd 4f       	sbci	r31, 0xFD	; 253
     268:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <pacman>
     26c:	80 83       	st	Z, r24
		red1[prevPacmany] = path;
     26e:	fa 01       	movw	r30, r20
     270:	ee 55       	subi	r30, 0x5E	; 94
     272:	fd 4f       	sbci	r31, 0xFD	; 253
     274:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <path>
     278:	80 83       	st	Z, r24
     27a:	46 c0       	rjmp	.+140    	; 0x308 <__EEPROM_REGION_LENGTH__+0x108>
	} else if ((!posPacmanx) && (direction == '2' || direction == '8')) {
     27c:	21 15       	cp	r18, r1
     27e:	31 05       	cpc	r19, r1
     280:	a9 f4       	brne	.+42     	; 0x2ac <__EEPROM_REGION_LENGTH__+0xac>
     282:	82 33       	cpi	r24, 0x32	; 50
     284:	11 f0       	breq	.+4      	; 0x28a <__EEPROM_REGION_LENGTH__+0x8a>
     286:	88 33       	cpi	r24, 0x38	; 56
     288:	89 f4       	brne	.+34     	; 0x2ac <__EEPROM_REGION_LENGTH__+0xac>
		
		red1[posPacmany] = pacman;
     28a:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <posPacmany>
     28e:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <posPacmany+0x1>
     292:	fc 01       	movw	r30, r24
     294:	ee 55       	subi	r30, 0x5E	; 94
     296:	fd 4f       	sbci	r31, 0xFD	; 253
     298:	40 91 66 00 	lds	r20, 0x0066	; 0x800066 <pacman>
     29c:	40 83       	st	Z, r20
		red2[posPacmany] = path;	
     29e:	fc 01       	movw	r30, r24
     2a0:	e6 58       	subi	r30, 0x86	; 134
     2a2:	fd 4f       	sbci	r31, 0xFD	; 253
     2a4:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <path>
     2a8:	40 83       	st	Z, r20
     2aa:	2e c0       	rjmp	.+92     	; 0x308 <__EEPROM_REGION_LENGTH__+0x108>
	} else if ((posPacmanx) && (direction == '4' || direction == '6')) {
     2ac:	21 15       	cp	r18, r1
     2ae:	31 05       	cpc	r19, r1
     2b0:	a1 f0       	breq	.+40     	; 0x2da <__EEPROM_REGION_LENGTH__+0xda>
     2b2:	84 33       	cpi	r24, 0x34	; 52
     2b4:	11 f0       	breq	.+4      	; 0x2ba <__EEPROM_REGION_LENGTH__+0xba>
     2b6:	86 33       	cpi	r24, 0x36	; 54
     2b8:	81 f4       	brne	.+32     	; 0x2da <__EEPROM_REGION_LENGTH__+0xda>
		
		red2[posPacmany] = pacman;
     2ba:	e0 91 58 02 	lds	r30, 0x0258	; 0x800258 <posPacmany>
     2be:	f0 91 59 02 	lds	r31, 0x0259	; 0x800259 <posPacmany+0x1>
     2c2:	e6 58       	subi	r30, 0x86	; 134
     2c4:	fd 4f       	sbci	r31, 0xFD	; 253
     2c6:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <pacman>
     2ca:	80 83       	st	Z, r24
		red2[prevPacmany] = path;
     2cc:	fa 01       	movw	r30, r20
     2ce:	e6 58       	subi	r30, 0x86	; 134
     2d0:	fd 4f       	sbci	r31, 0xFD	; 253
     2d2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <path>
     2d6:	80 83       	st	Z, r24
     2d8:	17 c0       	rjmp	.+46     	; 0x308 <__EEPROM_REGION_LENGTH__+0x108>
	} else if ((posPacmanx) && (direction == '2' || direction == '8')) {
     2da:	21 15       	cp	r18, r1
     2dc:	31 05       	cpc	r19, r1
     2de:	a1 f0       	breq	.+40     	; 0x308 <__EEPROM_REGION_LENGTH__+0x108>
     2e0:	82 33       	cpi	r24, 0x32	; 50
     2e2:	11 f0       	breq	.+4      	; 0x2e8 <__EEPROM_REGION_LENGTH__+0xe8>
     2e4:	88 33       	cpi	r24, 0x38	; 56
     2e6:	81 f4       	brne	.+32     	; 0x308 <__EEPROM_REGION_LENGTH__+0x108>
		
		red2[posPacmany] = pacman;
     2e8:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <posPacmany>
     2ec:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <posPacmany+0x1>
     2f0:	fc 01       	movw	r30, r24
     2f2:	e6 58       	subi	r30, 0x86	; 134
     2f4:	fd 4f       	sbci	r31, 0xFD	; 253
     2f6:	40 91 66 00 	lds	r20, 0x0066	; 0x800066 <pacman>
     2fa:	40 83       	st	Z, r20
		red1[posPacmany] = path;
     2fc:	fc 01       	movw	r30, r24
     2fe:	ee 55       	subi	r30, 0x5E	; 94
     300:	fd 4f       	sbci	r31, 0xFD	; 253
     302:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <path>
     306:	40 83       	st	Z, r20
	/*
	lcd_gotoxy(posPacmanx, posPacmany);
	lcd_putc(pacman);
	_delay_ms(200);
	*/
	if (!posPacmanx) {
     308:	23 2b       	or	r18, r19
     30a:	69 f4       	brne	.+26     	; 0x326 <__EEPROM_REGION_LENGTH__+0x126>
		bodovi(red1dots, posPacmany, end1);
     30c:	40 91 a0 02 	lds	r20, 0x02A0	; 0x8002a0 <end1>
     310:	50 91 a1 02 	lds	r21, 0x02A1	; 0x8002a1 <end1+0x1>
     314:	60 91 58 02 	lds	r22, 0x0258	; 0x800258 <posPacmany>
     318:	70 91 59 02 	lds	r23, 0x0259	; 0x800259 <posPacmany+0x1>
     31c:	86 e6       	ldi	r24, 0x66	; 102
     31e:	92 e0       	ldi	r25, 0x02	; 2
     320:	0e 94 8a 00 	call	0x114	; 0x114 <bodovi>
     324:	0c c0       	rjmp	.+24     	; 0x33e <__EEPROM_REGION_LENGTH__+0x13e>
	} else {
		bodovi(red2dots, posPacmany, end2);		
     326:	40 91 8a 02 	lds	r20, 0x028A	; 0x80028a <end2>
     32a:	50 91 8b 02 	lds	r21, 0x028B	; 0x80028b <end2+0x1>
     32e:	60 91 58 02 	lds	r22, 0x0258	; 0x800258 <posPacmany>
     332:	70 91 59 02 	lds	r23, 0x0259	; 0x800259 <posPacmany+0x1>
     336:	8c e8       	ldi	r24, 0x8C	; 140
     338:	92 e0       	ldi	r25, 0x02	; 2
     33a:	0e 94 8a 00 	call	0x114	; 0x114 <bodovi>
		}	
		
		mainScreenPacman();
     33e:	0e 94 aa 00 	call	0x154	; 0x154 <mainScreenPacman>
     342:	08 95       	ret

00000344 <startPacman>:
	
}


void startPacman(int *seconds)
{
     344:	af 92       	push	r10
     346:	bf 92       	push	r11
     348:	cf 92       	push	r12
     34a:	df 92       	push	r13
     34c:	ef 92       	push	r14
     34e:	ff 92       	push	r15
     350:	0f 93       	push	r16
     352:	1f 93       	push	r17
     354:	cf 93       	push	r28
     356:	df 93       	push	r29
     358:	8c 01       	movw	r16, r24
	posPacmanx = 0;
     35a:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <posPacmanx+0x1>
     35e:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <posPacmanx>
	posPacmany = 0;
     362:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <posPacmany+0x1>
     366:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <posPacmany>
	
	lcd_clrscr();
     36a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <lcd_clrscr>
	lcd_gotoxy(4,0);
     36e:	60 e0       	ldi	r22, 0x00	; 0
     370:	84 e0       	ldi	r24, 0x04	; 4
     372:	0e 94 14 05 	call	0xa28	; 0xa28 <lcd_gotoxy>
	lcd_puts("Pac-man!");
     376:	88 e4       	ldi	r24, 0x48	; 72
     378:	91 e0       	ldi	r25, 0x01	; 1
     37a:	0e 94 37 05 	call	0xa6e	; 0xa6e <lcd_puts>
     37e:	2f ef       	ldi	r18, 0xFF	; 255
     380:	8f ef       	ldi	r24, 0xFF	; 255
     382:	9c e2       	ldi	r25, 0x2C	; 44
     384:	21 50       	subi	r18, 0x01	; 1
     386:	80 40       	sbci	r24, 0x00	; 0
     388:	90 40       	sbci	r25, 0x00	; 0
     38a:	e1 f7       	brne	.-8      	; 0x384 <startPacman+0x40>
     38c:	00 c0       	rjmp	.+0      	; 0x38e <startPacman+0x4a>
     38e:	00 00       	nop
	_delay_ms(2000);
	
	
	lcd_clrscr();
     390:	0e 94 1e 05 	call	0xa3c	; 0xa3c <lcd_clrscr>
	lcd_gotoxy(0,0);
     394:	60 e0       	ldi	r22, 0x00	; 0
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	0e 94 14 05 	call	0xa28	; 0xa28 <lcd_gotoxy>
	lcd_puts("Skupi bodove");
     39c:	81 e5       	ldi	r24, 0x51	; 81
     39e:	91 e0       	ldi	r25, 0x01	; 1
     3a0:	0e 94 37 05 	call	0xa6e	; 0xa6e <lcd_puts>
	lcd_gotoxy(0,1);
     3a4:	61 e0       	ldi	r22, 0x01	; 1
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	0e 94 14 05 	call	0xa28	; 0xa28 <lcd_gotoxy>
	lcd_puts("u 10 sekundi");
     3ac:	8e e5       	ldi	r24, 0x5E	; 94
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	0e 94 37 05 	call	0xa6e	; 0xa6e <lcd_puts>
     3b4:	ef ef       	ldi	r30, 0xFF	; 255
     3b6:	ff ef       	ldi	r31, 0xFF	; 255
     3b8:	2c e2       	ldi	r18, 0x2C	; 44
     3ba:	e1 50       	subi	r30, 0x01	; 1
     3bc:	f0 40       	sbci	r31, 0x00	; 0
     3be:	20 40       	sbci	r18, 0x00	; 0
     3c0:	e1 f7       	brne	.-8      	; 0x3ba <startPacman+0x76>
     3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <startPacman+0x80>
     3c4:	00 00       	nop
	_delay_ms(2000);
	
	
			
	int i;
	red1[0] = pacman;
     3c6:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <pacman>
     3ca:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <red1>
	for (i = 1; i < 16; i++){
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	07 c0       	rjmp	.+14     	; 0x3e2 <startPacman+0x9e>
		red1[i] = path;
     3d4:	fc 01       	movw	r30, r24
     3d6:	ee 55       	subi	r30, 0x5E	; 94
     3d8:	fd 4f       	sbci	r31, 0xFD	; 253
     3da:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <path>
     3de:	20 83       	st	Z, r18
	
	
			
	int i;
	red1[0] = pacman;
	for (i = 1; i < 16; i++){
     3e0:	01 96       	adiw	r24, 0x01	; 1
     3e2:	80 31       	cpi	r24, 0x10	; 16
     3e4:	91 05       	cpc	r25, r1
     3e6:	b4 f3       	brlt	.-20     	; 0x3d4 <startPacman+0x90>
		red1[i] = path;
	}
	
	
	red1[i] = '\0';
     3e8:	fc 01       	movw	r30, r24
     3ea:	ee 55       	subi	r30, 0x5E	; 94
     3ec:	fd 4f       	sbci	r31, 0xFD	; 253
     3ee:	10 82       	st	Z, r1
	int j;
	for (j = 0; j < 16; j++){
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	07 c0       	rjmp	.+14     	; 0x404 <__DATA_REGION_LENGTH__+0x4>
		red2[j] = path;
     3f6:	fc 01       	movw	r30, r24
     3f8:	e6 58       	subi	r30, 0x86	; 134
     3fa:	fd 4f       	sbci	r31, 0xFD	; 253
     3fc:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <path>
     400:	20 83       	st	Z, r18
	}
	
	
	red1[i] = '\0';
	int j;
	for (j = 0; j < 16; j++){
     402:	01 96       	adiw	r24, 0x01	; 1
     404:	80 31       	cpi	r24, 0x10	; 16
     406:	91 05       	cpc	r25, r1
     408:	b4 f3       	brlt	.-20     	; 0x3f6 <startPacman+0xb2>
		red2[j] = path;
	}
	red2[j] = '\0';
     40a:	fc 01       	movw	r30, r24
     40c:	e6 58       	subi	r30, 0x86	; 134
     40e:	fd 4f       	sbci	r31, 0xFD	; 253
     410:	10 82       	st	Z, r1
	int z = 0;
	int k = 0;

		
		
	for (int i = 0; i < 10; i++){
     412:	e1 2c       	mov	r14, r1
     414:	f1 2c       	mov	r15, r1
		
	int randomNumberx;
	int randomNumbery;
	
	int z = 0;
	int k = 0;
     416:	a1 2c       	mov	r10, r1
     418:	b1 2c       	mov	r11, r1
	_delay_ms(250);*/
		
	int randomNumberx;
	int randomNumbery;
	
	int z = 0;
     41a:	c1 2c       	mov	r12, r1
     41c:	d1 2c       	mov	r13, r1
	int k = 0;

		
		
	for (int i = 0; i < 10; i++){
     41e:	3a c0       	rjmp	.+116    	; 0x494 <__stack+0x35>
		
		
		randomNumberx = rand() % 2;
     420:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <rand>
     424:	81 70       	andi	r24, 0x01	; 1
     426:	90 78       	andi	r25, 0x80	; 128
     428:	99 23       	and	r25, r25
     42a:	24 f4       	brge	.+8      	; 0x434 <__DATA_REGION_LENGTH__+0x34>
     42c:	01 97       	sbiw	r24, 0x01	; 1
     42e:	8e 6f       	ori	r24, 0xFE	; 254
     430:	9f 6f       	ori	r25, 0xFF	; 255
     432:	01 96       	adiw	r24, 0x01	; 1
     434:	ec 01       	movw	r28, r24
		randomNumbery = rand() % 15 + 1;			//+1
     436:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <rand>
     43a:	6f e0       	ldi	r22, 0x0F	; 15
     43c:	70 e0       	ldi	r23, 0x00	; 0
     43e:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__divmodhi4>
     442:	01 96       	adiw	r24, 0x01	; 1

		
		if (!randomNumberx){
     444:	20 97       	sbiw	r28, 0x00	; 0
     446:	89 f4       	brne	.+34     	; 0x46a <__stack+0xb>
			
			red1[randomNumbery] = dot;
     448:	fc 01       	movw	r30, r24
     44a:	ee 55       	subi	r30, 0x5E	; 94
     44c:	fd 4f       	sbci	r31, 0xFD	; 253
     44e:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <dot>
     452:	20 83       	st	Z, r18
			red1dots[z] = randomNumbery;
     454:	f6 01       	movw	r30, r12
     456:	ee 0f       	add	r30, r30
     458:	ff 1f       	adc	r31, r31
     45a:	ea 59       	subi	r30, 0x9A	; 154
     45c:	fd 4f       	sbci	r31, 0xFD	; 253
     45e:	91 83       	std	Z+1, r25	; 0x01
     460:	80 83       	st	Z, r24
			z++;
     462:	8f ef       	ldi	r24, 0xFF	; 255
     464:	c8 1a       	sub	r12, r24
     466:	d8 0a       	sbc	r13, r24
     468:	12 c0       	rjmp	.+36     	; 0x48e <__stack+0x2f>
			
		} else if (randomNumberx) {
     46a:	cd 2b       	or	r28, r29
     46c:	81 f0       	breq	.+32     	; 0x48e <__stack+0x2f>
			
			red2[randomNumbery] = dot;
     46e:	fc 01       	movw	r30, r24
     470:	e6 58       	subi	r30, 0x86	; 134
     472:	fd 4f       	sbci	r31, 0xFD	; 253
     474:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <dot>
     478:	20 83       	st	Z, r18
			red2dots[k] = randomNumbery;
     47a:	f5 01       	movw	r30, r10
     47c:	ee 0f       	add	r30, r30
     47e:	ff 1f       	adc	r31, r31
     480:	e4 57       	subi	r30, 0x74	; 116
     482:	fd 4f       	sbci	r31, 0xFD	; 253
     484:	91 83       	std	Z+1, r25	; 0x01
     486:	80 83       	st	Z, r24
			k++;
     488:	9f ef       	ldi	r25, 0xFF	; 255
     48a:	a9 1a       	sub	r10, r25
     48c:	b9 0a       	sbc	r11, r25
	int z = 0;
	int k = 0;

		
		
	for (int i = 0; i < 10; i++){
     48e:	ef ef       	ldi	r30, 0xFF	; 255
     490:	ee 1a       	sub	r14, r30
     492:	fe 0a       	sbc	r15, r30
     494:	fa e0       	ldi	r31, 0x0A	; 10
     496:	ef 16       	cp	r14, r31
     498:	f1 04       	cpc	r15, r1
     49a:	14 f2       	brlt	.-124    	; 0x420 <__DATA_REGION_LENGTH__+0x20>
	}
	
	//red1dots[z] = '\0';
	//red2dots[k] = '\0';
	
	end1 = z;
     49c:	d0 92 a1 02 	sts	0x02A1, r13	; 0x8002a1 <end1+0x1>
     4a0:	c0 92 a0 02 	sts	0x02A0, r12	; 0x8002a0 <end1>
	end2 = k;
     4a4:	b0 92 8b 02 	sts	0x028B, r11	; 0x80028b <end2+0x1>
     4a8:	a0 92 8a 02 	sts	0x028A, r10	; 0x80028a <end2>
		
		
	mainScreenPacman();
     4ac:	0e 94 aa 00 	call	0x154	; 0x154 <mainScreenPacman>

		tmpSeconds = *seconds;
     4b0:	f8 01       	movw	r30, r16
     4b2:	80 81       	ld	r24, Z
     4b4:	91 81       	ldd	r25, Z+1	; 0x01
     4b6:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <__data_end+0x1>
     4ba:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <__data_end>
	score = 0;
     4be:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <score+0x1>
     4c2:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <score>
    while (*seconds < tmpSeconds + 15) 
     4c6:	0d c0       	rjmp	.+26     	; 0x4e2 <__stack+0x83>
    {
		

		smjer(pressedKey());
     4c8:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <pressedKey>
     4cc:	0e 94 c6 00 	call	0x18c	; 0x18c <smjer>
     4d0:	ff ef       	ldi	r31, 0xFF	; 255
     4d2:	2f e1       	ldi	r18, 0x1F	; 31
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	f1 50       	subi	r31, 0x01	; 1
     4d8:	20 40       	sbci	r18, 0x00	; 0
     4da:	80 40       	sbci	r24, 0x00	; 0
     4dc:	e1 f7       	brne	.-8      	; 0x4d6 <__stack+0x77>
     4de:	00 c0       	rjmp	.+0      	; 0x4e0 <__stack+0x81>
     4e0:	00 00       	nop
		
	mainScreenPacman();

		tmpSeconds = *seconds;
	score = 0;
    while (*seconds < tmpSeconds + 15) 
     4e2:	f8 01       	movw	r30, r16
     4e4:	20 81       	ld	r18, Z
     4e6:	31 81       	ldd	r19, Z+1	; 0x01
     4e8:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <__data_end>
     4ec:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <__data_end+0x1>
     4f0:	0f 96       	adiw	r24, 0x0f	; 15
     4f2:	28 17       	cp	r18, r24
     4f4:	39 07       	cpc	r19, r25
     4f6:	44 f3       	brlt	.-48     	; 0x4c8 <__stack+0x69>
		smjer(pressedKey());
		_delay_ms(50);
		

    }
	gameOverPacman();
     4f8:	0e 94 6f 00 	call	0xde	; 0xde <gameOverPacman>
	
	if (!posPacmanx) {
     4fc:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <posPacmanx>
     500:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <posPacmanx+0x1>
     504:	89 2b       	or	r24, r25
     506:	51 f4       	brne	.+20     	; 0x51c <__stack+0xbd>
		red1[posPacmany] = path;
     508:	e0 91 58 02 	lds	r30, 0x0258	; 0x800258 <posPacmany>
     50c:	f0 91 59 02 	lds	r31, 0x0259	; 0x800259 <posPacmany+0x1>
     510:	ee 55       	subi	r30, 0x5E	; 94
     512:	fd 4f       	sbci	r31, 0xFD	; 253
     514:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <path>
     518:	80 83       	st	Z, r24
     51a:	09 c0       	rjmp	.+18     	; 0x52e <__stack+0xcf>
		} else {
		red2[posPacmany] = path;
     51c:	e0 91 58 02 	lds	r30, 0x0258	; 0x800258 <posPacmany>
     520:	f0 91 59 02 	lds	r31, 0x0259	; 0x800259 <posPacmany+0x1>
     524:	e6 58       	subi	r30, 0x86	; 134
     526:	fd 4f       	sbci	r31, 0xFD	; 253
     528:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <path>
     52c:	80 83       	st	Z, r24
	}
	return;
     52e:	df 91       	pop	r29
     530:	cf 91       	pop	r28
     532:	1f 91       	pop	r17
     534:	0f 91       	pop	r16
     536:	ff 90       	pop	r15
     538:	ef 90       	pop	r14
     53a:	df 90       	pop	r13
     53c:	cf 90       	pop	r12
     53e:	bf 90       	pop	r11
     540:	af 90       	pop	r10
     542:	08 95       	ret

00000544 <randNumber>:
int tmpSecondsLed = 0;

int randNumber()
{
	int num = 0;
	num = TCNT0 % 4;
     544:	82 b7       	in	r24, 0x32	; 50
     546:	83 70       	andi	r24, 0x03	; 3
	return num;
}
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	08 95       	ret

0000054c <check_activity>:
void check_activity(int *punti, int *ledOn, int brLedice)
{
     54c:	0f 93       	push	r16
     54e:	1f 93       	push	r17
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	8b 01       	movw	r16, r22
     556:	ea 01       	movw	r28, r20
	PORTA ^= _BV(7 - *ledOn);
     558:	6b b3       	in	r22, 0x1b	; 27
     55a:	f8 01       	movw	r30, r16
     55c:	20 81       	ld	r18, Z
     55e:	31 81       	ldd	r19, Z+1	; 0x01
     560:	47 e0       	ldi	r20, 0x07	; 7
     562:	50 e0       	ldi	r21, 0x00	; 0
     564:	42 1b       	sub	r20, r18
     566:	53 0b       	sbc	r21, r19
     568:	21 e0       	ldi	r18, 0x01	; 1
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	02 c0       	rjmp	.+4      	; 0x572 <check_activity+0x26>
     56e:	22 0f       	add	r18, r18
     570:	33 1f       	adc	r19, r19
     572:	4a 95       	dec	r20
     574:	e2 f7       	brpl	.-8      	; 0x56e <check_activity+0x22>
     576:	26 27       	eor	r18, r22
     578:	2b bb       	out	0x1b, r18	; 27
	if(brLedice == *ledOn)
     57a:	20 81       	ld	r18, Z
     57c:	31 81       	ldd	r19, Z+1	; 0x01
     57e:	2c 17       	cp	r18, r28
     580:	3d 07       	cpc	r19, r29
     582:	41 f4       	brne	.+16     	; 0x594 <check_activity+0x48>
	{
		(*punti)++;
     584:	fc 01       	movw	r30, r24
     586:	20 81       	ld	r18, Z
     588:	31 81       	ldd	r19, Z+1	; 0x01
     58a:	2f 5f       	subi	r18, 0xFF	; 255
     58c:	3f 4f       	sbci	r19, 0xFF	; 255
     58e:	31 83       	std	Z+1, r19	; 0x01
     590:	20 83       	st	Z, r18
     592:	19 c0       	rjmp	.+50     	; 0x5c6 <check_activity+0x7a>
	}
	else{
		lcd_gotoxy(4, 0);
     594:	60 e0       	ldi	r22, 0x00	; 0
     596:	84 e0       	ldi	r24, 0x04	; 4
     598:	0e 94 14 05 	call	0xa28	; 0xa28 <lcd_gotoxy>
		lcd_puts("Pogresno");
     59c:	8b e6       	ldi	r24, 0x6B	; 107
     59e:	91 e0       	ldi	r25, 0x01	; 1
     5a0:	0e 94 37 05 	call	0xa6e	; 0xa6e <lcd_puts>
     5a4:	ff ef       	ldi	r31, 0xFF	; 255
     5a6:	2f ef       	ldi	r18, 0xFF	; 255
     5a8:	8c e2       	ldi	r24, 0x2C	; 44
     5aa:	f1 50       	subi	r31, 0x01	; 1
     5ac:	20 40       	sbci	r18, 0x00	; 0
     5ae:	80 40       	sbci	r24, 0x00	; 0
     5b0:	e1 f7       	brne	.-8      	; 0x5aa <check_activity+0x5e>
     5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <check_activity+0x68>
     5b4:	00 00       	nop
		_delay_ms(2000);
		lcd_gotoxy(4, 0);
     5b6:	60 e0       	ldi	r22, 0x00	; 0
     5b8:	84 e0       	ldi	r24, 0x04	; 4
     5ba:	0e 94 14 05 	call	0xa28	; 0xa28 <lcd_gotoxy>
		lcd_puts("        ");
     5be:	84 e7       	ldi	r24, 0x74	; 116
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	0e 94 37 05 	call	0xa6e	; 0xa6e <lcd_puts>
     5c6:	e9 e9       	ldi	r30, 0x99	; 153
     5c8:	f5 e1       	ldi	r31, 0x15	; 21
     5ca:	31 97       	sbiw	r30, 0x01	; 1
     5cc:	f1 f7       	brne	.-4      	; 0x5ca <check_activity+0x7e>
     5ce:	00 c0       	rjmp	.+0      	; 0x5d0 <check_activity+0x84>
	}
	
	_delay_ms(3);
	while((PIND & _BV(7 - brLedice)));
     5d0:	80 b3       	in	r24, 0x10	; 16
     5d2:	27 e0       	ldi	r18, 0x07	; 7
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	2c 1b       	sub	r18, r28
     5d8:	3d 0b       	sbc	r19, r29
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <check_activity+0x96>
     5de:	95 95       	asr	r25
     5e0:	87 95       	ror	r24
     5e2:	2a 95       	dec	r18
     5e4:	e2 f7       	brpl	.-8      	; 0x5de <check_activity+0x92>
     5e6:	80 fd       	sbrc	r24, 0
     5e8:	f3 cf       	rjmp	.-26     	; 0x5d0 <check_activity+0x84>
	*ledOn = randNumber();
     5ea:	0e 94 a2 02 	call	0x544	; 0x544 <randNumber>
     5ee:	f8 01       	movw	r30, r16
     5f0:	91 83       	std	Z+1, r25	; 0x01
     5f2:	80 83       	st	Z, r24
	PORTA ^= _BV(7 - *ledOn);
     5f4:	6b b3       	in	r22, 0x1b	; 27
     5f6:	27 e0       	ldi	r18, 0x07	; 7
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	28 1b       	sub	r18, r24
     5fc:	39 0b       	sbc	r19, r25
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	02 c0       	rjmp	.+4      	; 0x608 <check_activity+0xbc>
     604:	88 0f       	add	r24, r24
     606:	99 1f       	adc	r25, r25
     608:	2a 95       	dec	r18
     60a:	e2 f7       	brpl	.-8      	; 0x604 <check_activity+0xb8>
     60c:	86 27       	eor	r24, r22
     60e:	8b bb       	out	0x1b, r24	; 27
	return;
}
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	1f 91       	pop	r17
     616:	0f 91       	pop	r16
     618:	08 95       	ret

0000061a <randomLed>:
void randomLed(int *seconds)
{
     61a:	ef 92       	push	r14
     61c:	ff 92       	push	r15
     61e:	0f 93       	push	r16
     620:	1f 93       	push	r17
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	00 d0       	rcall	.+0      	; 0x628 <randomLed+0xe>
     628:	00 d0       	rcall	.+0      	; 0x62a <randomLed+0x10>
     62a:	cd b7       	in	r28, 0x3d	; 61
     62c:	de b7       	in	r29, 0x3e	; 62
     62e:	7c 01       	movw	r14, r24
	tmpSecondsLed = *seconds;
     630:	fc 01       	movw	r30, r24
     632:	80 81       	ld	r24, Z
     634:	91 81       	ldd	r25, Z+1	; 0x01
     636:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <tmpSecondsLed+0x1>
     63a:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <tmpSecondsLed>
	lcd_clrscr();
     63e:	0e 94 1e 05 	call	0xa3c	; 0xa3c <lcd_clrscr>
	int gameOn = 1;
	int ledOn = 0;
     642:	1a 82       	std	Y+2, r1	; 0x02
     644:	19 82       	std	Y+1, r1	; 0x01
	int punti = 0;
     646:	1c 82       	std	Y+4, r1	; 0x04
     648:	1b 82       	std	Y+3, r1	; 0x03
	PORTA ^= _BV(7 - ledOn);
     64a:	8b b3       	in	r24, 0x1b	; 27
     64c:	80 58       	subi	r24, 0x80	; 128
     64e:	8b bb       	out	0x1b, r24	; 27
	sei();
     650:	78 94       	sei
	while(*seconds < tmpSecondsLed + 40){
     652:	81 c0       	rjmp	.+258    	; 0x756 <randomLed+0x13c>
		
			if((PIND & _BV(7)) && gameOn)
     654:	87 9b       	sbis	0x10, 7	; 16
     656:	0e c0       	rjmp	.+28     	; 0x674 <randomLed+0x5a>
			{
				check_activity(&punti, &ledOn, 0);
     658:	40 e0       	ldi	r20, 0x00	; 0
     65a:	50 e0       	ldi	r21, 0x00	; 0
     65c:	be 01       	movw	r22, r28
     65e:	6f 5f       	subi	r22, 0xFF	; 255
     660:	7f 4f       	sbci	r23, 0xFF	; 255
     662:	ce 01       	movw	r24, r28
     664:	03 96       	adiw	r24, 0x03	; 3
     666:	0e 94 a6 02 	call	0x54c	; 0x54c <check_activity>
				lcd_puts("R");
     66a:	8d e7       	ldi	r24, 0x7D	; 125
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	0e 94 37 05 	call	0xa6e	; 0xa6e <lcd_puts>
     672:	2f c0       	rjmp	.+94     	; 0x6d2 <randomLed+0xb8>
			}
			
			else if((PIND & _BV(6)) && gameOn)
     674:	86 9b       	sbis	0x10, 6	; 16
     676:	0e c0       	rjmp	.+28     	; 0x694 <randomLed+0x7a>
			{
				check_activity(&punti, &ledOn, 1);
     678:	41 e0       	ldi	r20, 0x01	; 1
     67a:	50 e0       	ldi	r21, 0x00	; 0
     67c:	be 01       	movw	r22, r28
     67e:	6f 5f       	subi	r22, 0xFF	; 255
     680:	7f 4f       	sbci	r23, 0xFF	; 255
     682:	ce 01       	movw	r24, r28
     684:	03 96       	adiw	r24, 0x03	; 3
     686:	0e 94 a6 02 	call	0x54c	; 0x54c <check_activity>
				lcd_puts("T");
     68a:	8f e7       	ldi	r24, 0x7F	; 127
     68c:	91 e0       	ldi	r25, 0x01	; 1
     68e:	0e 94 37 05 	call	0xa6e	; 0xa6e <lcd_puts>
     692:	1f c0       	rjmp	.+62     	; 0x6d2 <randomLed+0xb8>
			}
			else if((PIND & _BV(5)) && gameOn)
     694:	85 9b       	sbis	0x10, 5	; 16
     696:	0e c0       	rjmp	.+28     	; 0x6b4 <randomLed+0x9a>
			{
				check_activity(&punti, &ledOn, 2);
     698:	42 e0       	ldi	r20, 0x02	; 2
     69a:	50 e0       	ldi	r21, 0x00	; 0
     69c:	be 01       	movw	r22, r28
     69e:	6f 5f       	subi	r22, 0xFF	; 255
     6a0:	7f 4f       	sbci	r23, 0xFF	; 255
     6a2:	ce 01       	movw	r24, r28
     6a4:	03 96       	adiw	r24, 0x03	; 3
     6a6:	0e 94 a6 02 	call	0x54c	; 0x54c <check_activity>
				lcd_puts("L");
     6aa:	81 e8       	ldi	r24, 0x81	; 129
     6ac:	91 e0       	ldi	r25, 0x01	; 1
     6ae:	0e 94 37 05 	call	0xa6e	; 0xa6e <lcd_puts>
     6b2:	0f c0       	rjmp	.+30     	; 0x6d2 <randomLed+0xb8>
				
			}
			else if((PIND & _BV(4)) && gameOn)
     6b4:	84 9b       	sbis	0x10, 4	; 16
     6b6:	0d c0       	rjmp	.+26     	; 0x6d2 <randomLed+0xb8>
			{
				check_activity(&punti, &ledOn, 3);
     6b8:	43 e0       	ldi	r20, 0x03	; 3
     6ba:	50 e0       	ldi	r21, 0x00	; 0
     6bc:	be 01       	movw	r22, r28
     6be:	6f 5f       	subi	r22, 0xFF	; 255
     6c0:	7f 4f       	sbci	r23, 0xFF	; 255
     6c2:	ce 01       	movw	r24, r28
     6c4:	03 96       	adiw	r24, 0x03	; 3
     6c6:	0e 94 a6 02 	call	0x54c	; 0x54c <check_activity>
				lcd_puts("D");
     6ca:	83 e8       	ldi	r24, 0x83	; 131
     6cc:	91 e0       	ldi	r25, 0x01	; 1
     6ce:	0e 94 37 05 	call	0xa6e	; 0xa6e <lcd_puts>
				
			}
			if(gameOn){
				lcd_gotoxy(1, 1);
     6d2:	61 e0       	ldi	r22, 0x01	; 1
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	0e 94 14 05 	call	0xa28	; 0xa28 <lcd_gotoxy>
				lcd_putc('0' + ledOn);
     6da:	89 81       	ldd	r24, Y+1	; 0x01
     6dc:	80 5d       	subi	r24, 0xD0	; 208
     6de:	0e 94 22 05 	call	0xa44	; 0xa44 <lcd_putc>
				lcd_puts("  ");
     6e2:	8a e7       	ldi	r24, 0x7A	; 122
     6e4:	91 e0       	ldi	r25, 0x01	; 1
     6e6:	0e 94 37 05 	call	0xa6e	; 0xa6e <lcd_puts>
				lcd_putc('0' + (punti / 10));
     6ea:	8b 81       	ldd	r24, Y+3	; 0x03
     6ec:	9c 81       	ldd	r25, Y+4	; 0x04
     6ee:	0a e0       	ldi	r16, 0x0A	; 10
     6f0:	10 e0       	ldi	r17, 0x00	; 0
     6f2:	b8 01       	movw	r22, r16
     6f4:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__divmodhi4>
     6f8:	80 e3       	ldi	r24, 0x30	; 48
     6fa:	86 0f       	add	r24, r22
     6fc:	0e 94 22 05 	call	0xa44	; 0xa44 <lcd_putc>
				lcd_putc('0' + (punti % 10));
     700:	8b 81       	ldd	r24, Y+3	; 0x03
     702:	9c 81       	ldd	r25, Y+4	; 0x04
     704:	b8 01       	movw	r22, r16
     706:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__divmodhi4>
     70a:	80 5d       	subi	r24, 0xD0	; 208
     70c:	0e 94 22 05 	call	0xa44	; 0xa44 <lcd_putc>
				lcd_puts("  ");
     710:	8a e7       	ldi	r24, 0x7A	; 122
     712:	91 e0       	ldi	r25, 0x01	; 1
     714:	0e 94 37 05 	call	0xa6e	; 0xa6e <lcd_puts>
				lcd_putc('0' + ((*seconds - tmpSecondsLed) / 10));
     718:	f7 01       	movw	r30, r14
     71a:	80 81       	ld	r24, Z
     71c:	91 81       	ldd	r25, Z+1	; 0x01
     71e:	20 91 5c 02 	lds	r18, 0x025C	; 0x80025c <tmpSecondsLed>
     722:	30 91 5d 02 	lds	r19, 0x025D	; 0x80025d <tmpSecondsLed+0x1>
     726:	82 1b       	sub	r24, r18
     728:	93 0b       	sbc	r25, r19
     72a:	b8 01       	movw	r22, r16
     72c:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__divmodhi4>
     730:	80 e3       	ldi	r24, 0x30	; 48
     732:	86 0f       	add	r24, r22
     734:	0e 94 22 05 	call	0xa44	; 0xa44 <lcd_putc>
				lcd_putc('0' + ((*seconds - tmpSecondsLed) % 10));
     738:	f7 01       	movw	r30, r14
     73a:	80 81       	ld	r24, Z
     73c:	91 81       	ldd	r25, Z+1	; 0x01
     73e:	20 91 5c 02 	lds	r18, 0x025C	; 0x80025c <tmpSecondsLed>
     742:	30 91 5d 02 	lds	r19, 0x025D	; 0x80025d <tmpSecondsLed+0x1>
     746:	82 1b       	sub	r24, r18
     748:	93 0b       	sbc	r25, r19
     74a:	b8 01       	movw	r22, r16
     74c:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__divmodhi4>
     750:	80 5d       	subi	r24, 0xD0	; 208
     752:	0e 94 22 05 	call	0xa44	; 0xa44 <lcd_putc>
	int gameOn = 1;
	int ledOn = 0;
	int punti = 0;
	PORTA ^= _BV(7 - ledOn);
	sei();
	while(*seconds < tmpSecondsLed + 40){
     756:	f7 01       	movw	r30, r14
     758:	20 81       	ld	r18, Z
     75a:	31 81       	ldd	r19, Z+1	; 0x01
     75c:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <tmpSecondsLed>
     760:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <tmpSecondsLed+0x1>
     764:	88 96       	adiw	r24, 0x28	; 40
     766:	28 17       	cp	r18, r24
     768:	39 07       	cpc	r19, r25
     76a:	0c f4       	brge	.+2      	; 0x76e <randomLed+0x154>
     76c:	73 cf       	rjmp	.-282    	; 0x654 <randomLed+0x3a>
				lcd_puts("  ");
				lcd_putc('0' + ((*seconds - tmpSecondsLed) / 10));
				lcd_putc('0' + ((*seconds - tmpSecondsLed) % 10));
			}
		}
	lcd_clrscr();
     76e:	0e 94 1e 05 	call	0xa3c	; 0xa3c <lcd_clrscr>
	lcd_gotoxy(0, 0);
     772:	60 e0       	ldi	r22, 0x00	; 0
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	0e 94 14 05 	call	0xa28	; 0xa28 <lcd_gotoxy>
	lcd_puts("Vrijeme isetklo!");
     77a:	85 e8       	ldi	r24, 0x85	; 133
     77c:	91 e0       	ldi	r25, 0x01	; 1
     77e:	0e 94 37 05 	call	0xa6e	; 0xa6e <lcd_puts>
	lcd_gotoxy(0, 1);
     782:	61 e0       	ldi	r22, 0x01	; 1
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	0e 94 14 05 	call	0xa28	; 0xa28 <lcd_gotoxy>
	lcd_putc('0' + (punti / 10));
     78a:	8b 81       	ldd	r24, Y+3	; 0x03
     78c:	9c 81       	ldd	r25, Y+4	; 0x04
     78e:	0a e0       	ldi	r16, 0x0A	; 10
     790:	10 e0       	ldi	r17, 0x00	; 0
     792:	b8 01       	movw	r22, r16
     794:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__divmodhi4>
     798:	80 e3       	ldi	r24, 0x30	; 48
     79a:	86 0f       	add	r24, r22
     79c:	0e 94 22 05 	call	0xa44	; 0xa44 <lcd_putc>
	lcd_putc('0' + (punti % 10));
     7a0:	8b 81       	ldd	r24, Y+3	; 0x03
     7a2:	9c 81       	ldd	r25, Y+4	; 0x04
     7a4:	b8 01       	movw	r22, r16
     7a6:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__divmodhi4>
     7aa:	80 5d       	subi	r24, 0xD0	; 208
     7ac:	0e 94 22 05 	call	0xa44	; 0xa44 <lcd_putc>
     7b0:	ff ef       	ldi	r31, 0xFF	; 255
     7b2:	2f e3       	ldi	r18, 0x3F	; 63
     7b4:	8b e0       	ldi	r24, 0x0B	; 11
     7b6:	f1 50       	subi	r31, 0x01	; 1
     7b8:	20 40       	sbci	r18, 0x00	; 0
     7ba:	80 40       	sbci	r24, 0x00	; 0
     7bc:	e1 f7       	brne	.-8      	; 0x7b6 <randomLed+0x19c>
     7be:	00 c0       	rjmp	.+0      	; 0x7c0 <randomLed+0x1a6>
     7c0:	00 00       	nop
	gameOn = 0;
	_delay_ms(500);
     7c2:	0f 90       	pop	r0
     7c4:	0f 90       	pop	r0
     7c6:	0f 90       	pop	r0
     7c8:	0f 90       	pop	r0
     7ca:	df 91       	pop	r29
     7cc:	cf 91       	pop	r28
     7ce:	1f 91       	pop	r17
     7d0:	0f 91       	pop	r16
     7d2:	ff 90       	pop	r15
     7d4:	ef 90       	pop	r14
     7d6:	08 95       	ret

000007d8 <pressedKey>:
{'D','*','0','#'}};

 char pressedKey() {
	 
	 //prva 4 pina treba postaviti na 1, a druga 4 na 0 -> stupci i redovi
	 KEY_DDR = 0xF0;
     7d8:	80 ef       	ldi	r24, 0xF0	; 240
     7da:	8a bb       	out	0x1a, r24	; 26
	 KEY_PRT = 0xFF;
     7dc:	8f ef       	ldi	r24, 0xFF	; 255
     7de:	8b bb       	out	0x1b, r24	; 27

		 
		 //provjera dal je pritisnuta tipka, u kojem redu?
		 
		 //slucaj: red 0
		 KEY_PRT=0xEF;  //11101111 -> red 0
     7e0:	8f ee       	ldi	r24, 0xEF	; 239
     7e2:	8b bb       	out	0x1b, r24	; 27
		 colStatus = KEY_PIN & columnMask;
     7e4:	99 b3       	in	r25, 0x19	; 25
     7e6:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <columnMask>
     7ea:	89 23       	and	r24, r25
     7ec:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <colStatus>
		 if(colStatus != 0x0F) { // npr C4C3C2C1=1110 to znaci da je pritisnuta tipka u prvom stupcu
     7f0:	8f 30       	cpi	r24, 0x0F	; 15
     7f2:	19 f0       	breq	.+6      	; 0x7fa <pressedKey+0x22>
			 rowStatus = 0;
     7f4:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <rowStatus>
			 goto rows;
     7f8:	29 c0       	rjmp	.+82     	; 0x84c <pressedKey+0x74>
		 }
		 //slucaj:red 1
		 KEY_PRT=0xDF;  //11011111 -> red 1
     7fa:	8f ed       	ldi	r24, 0xDF	; 223
     7fc:	8b bb       	out	0x1b, r24	; 27
		 colStatus = KEY_PIN & columnMask;
     7fe:	99 b3       	in	r25, 0x19	; 25
     800:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <columnMask>
     804:	89 23       	and	r24, r25
     806:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <colStatus>
		 if(colStatus != 0x0F) {
     80a:	8f 30       	cpi	r24, 0x0F	; 15
     80c:	21 f0       	breq	.+8      	; 0x816 <pressedKey+0x3e>
			 rowStatus = 1;
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <rowStatus>
			 goto rows;
     814:	1b c0       	rjmp	.+54     	; 0x84c <pressedKey+0x74>
		 }
		 //slucaj:red 2
		 KEY_PRT=0xBF;  //10111111 -> red 2
     816:	8f eb       	ldi	r24, 0xBF	; 191
     818:	8b bb       	out	0x1b, r24	; 27
		 colStatus = KEY_PIN & columnMask;
     81a:	99 b3       	in	r25, 0x19	; 25
     81c:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <columnMask>
     820:	89 23       	and	r24, r25
     822:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <colStatus>
		 if(colStatus != 0x0F) {
     826:	8f 30       	cpi	r24, 0x0F	; 15
     828:	21 f0       	breq	.+8      	; 0x832 <pressedKey+0x5a>
			 rowStatus = 2;
     82a:	82 e0       	ldi	r24, 0x02	; 2
     82c:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <rowStatus>
			 goto rows;
     830:	0d c0       	rjmp	.+26     	; 0x84c <pressedKey+0x74>
		 }
		 //slucaj:red 3
		 KEY_PRT=0x7F;  //01111111 -> red 3
     832:	8f e7       	ldi	r24, 0x7F	; 127
     834:	8b bb       	out	0x1b, r24	; 27
		 colStatus = KEY_PIN & columnMask;
     836:	99 b3       	in	r25, 0x19	; 25
     838:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <columnMask>
     83c:	89 23       	and	r24, r25
     83e:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <colStatus>
		 if(colStatus != 0x0F) {
     842:	8f 30       	cpi	r24, 0x0F	; 15
     844:	19 f0       	breq	.+6      	; 0x84c <pressedKey+0x74>
			 rowStatus = 3;
     846:	83 e0       	ldi	r24, 0x03	; 3
     848:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <rowStatus>
			 goto rows;
		 }
		 
		 //provjera u kojem stupcu je pritisnuta tipka
		 rows:;
		 if(colStatus == 0x0e) {
     84c:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <colStatus>
     850:	8e 30       	cpi	r24, 0x0E	; 14
     852:	39 f4       	brne	.+14     	; 0x862 <pressedKey+0x8a>
			 //1110 -> stupac 0
			 return keypad[0][rowStatus];
     854:	e0 91 b3 02 	lds	r30, 0x02B3	; 0x8002b3 <rowStatus>
     858:	f0 e0       	ldi	r31, 0x00	; 0
     85a:	e9 59       	subi	r30, 0x99	; 153
     85c:	ff 4f       	sbci	r31, 0xFF	; 255
     85e:	80 81       	ld	r24, Z
     860:	08 95       	ret
			 } else if(colStatus == 0x0d) {
     862:	8d 30       	cpi	r24, 0x0D	; 13
     864:	39 f4       	brne	.+14     	; 0x874 <pressedKey+0x9c>
			 //1101 -> stupac 1
			 return keypad[1][rowStatus];
     866:	e0 91 b3 02 	lds	r30, 0x02B3	; 0x8002b3 <rowStatus>
     86a:	f0 e0       	ldi	r31, 0x00	; 0
     86c:	e9 59       	subi	r30, 0x99	; 153
     86e:	ff 4f       	sbci	r31, 0xFF	; 255
     870:	84 81       	ldd	r24, Z+4	; 0x04
     872:	08 95       	ret
			 } else if(colStatus == 0x0b) {
     874:	8b 30       	cpi	r24, 0x0B	; 11
     876:	39 f4       	brne	.+14     	; 0x886 <pressedKey+0xae>
			 //1011 -> stupac 2
			 return keypad[2][rowStatus];
     878:	e0 91 b3 02 	lds	r30, 0x02B3	; 0x8002b3 <rowStatus>
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	e9 59       	subi	r30, 0x99	; 153
     880:	ff 4f       	sbci	r31, 0xFF	; 255
     882:	80 85       	ldd	r24, Z+8	; 0x08
     884:	08 95       	ret
			 } else if(colStatus == 0x07) {
     886:	87 30       	cpi	r24, 0x07	; 7
     888:	39 f4       	brne	.+14     	; 0x898 <pressedKey+0xc0>
			 //0111 -> stupac 3
			 return keypad[3][rowStatus];
     88a:	e0 91 b3 02 	lds	r30, 0x02B3	; 0x8002b3 <rowStatus>
     88e:	f0 e0       	ldi	r31, 0x00	; 0
     890:	e9 59       	subi	r30, 0x99	; 153
     892:	ff 4f       	sbci	r31, 0xFF	; 255
     894:	84 85       	ldd	r24, Z+12	; 0x0c
     896:	08 95       	ret
		 }

	 return '/';
     898:	8f e2       	ldi	r24, 0x2F	; 47
     89a:	08 95       	ret

0000089c <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
     89c:	88 b3       	in	r24, 0x18	; 24
     89e:	80 68       	ori	r24, 0x80	; 128
     8a0:	88 bb       	out	0x18, r24	; 24
     8a2:	00 c0       	rjmp	.+0      	; 0x8a4 <toggle_e+0x8>
     8a4:	88 b3       	in	r24, 0x18	; 24
     8a6:	8f 77       	andi	r24, 0x7F	; 127
     8a8:	88 bb       	out	0x18, r24	; 24
     8aa:	08 95       	ret

000008ac <lcd_write>:
     8ac:	cf 93       	push	r28
     8ae:	c8 2f       	mov	r28, r24
     8b0:	66 23       	and	r22, r22
     8b2:	21 f0       	breq	.+8      	; 0x8bc <lcd_write+0x10>
     8b4:	88 b3       	in	r24, 0x18	; 24
     8b6:	80 62       	ori	r24, 0x20	; 32
     8b8:	88 bb       	out	0x18, r24	; 24
     8ba:	03 c0       	rjmp	.+6      	; 0x8c2 <lcd_write+0x16>
     8bc:	88 b3       	in	r24, 0x18	; 24
     8be:	8f 7d       	andi	r24, 0xDF	; 223
     8c0:	88 bb       	out	0x18, r24	; 24
     8c2:	88 b3       	in	r24, 0x18	; 24
     8c4:	8f 7b       	andi	r24, 0xBF	; 191
     8c6:	88 bb       	out	0x18, r24	; 24
     8c8:	87 b3       	in	r24, 0x17	; 23
     8ca:	81 60       	ori	r24, 0x01	; 1
     8cc:	87 bb       	out	0x17, r24	; 23
     8ce:	87 b3       	in	r24, 0x17	; 23
     8d0:	82 60       	ori	r24, 0x02	; 2
     8d2:	87 bb       	out	0x17, r24	; 23
     8d4:	87 b3       	in	r24, 0x17	; 23
     8d6:	84 60       	ori	r24, 0x04	; 4
     8d8:	87 bb       	out	0x17, r24	; 23
     8da:	87 b3       	in	r24, 0x17	; 23
     8dc:	80 61       	ori	r24, 0x10	; 16
     8de:	87 bb       	out	0x17, r24	; 23
     8e0:	88 b3       	in	r24, 0x18	; 24
     8e2:	8f 7e       	andi	r24, 0xEF	; 239
     8e4:	88 bb       	out	0x18, r24	; 24
     8e6:	88 b3       	in	r24, 0x18	; 24
     8e8:	8b 7f       	andi	r24, 0xFB	; 251
     8ea:	88 bb       	out	0x18, r24	; 24
     8ec:	88 b3       	in	r24, 0x18	; 24
     8ee:	8d 7f       	andi	r24, 0xFD	; 253
     8f0:	88 bb       	out	0x18, r24	; 24
     8f2:	88 b3       	in	r24, 0x18	; 24
     8f4:	8e 7f       	andi	r24, 0xFE	; 254
     8f6:	88 bb       	out	0x18, r24	; 24
     8f8:	cc 23       	and	r28, r28
     8fa:	1c f4       	brge	.+6      	; 0x902 <lcd_write+0x56>
     8fc:	88 b3       	in	r24, 0x18	; 24
     8fe:	80 61       	ori	r24, 0x10	; 16
     900:	88 bb       	out	0x18, r24	; 24
     902:	c6 ff       	sbrs	r28, 6
     904:	03 c0       	rjmp	.+6      	; 0x90c <lcd_write+0x60>
     906:	88 b3       	in	r24, 0x18	; 24
     908:	84 60       	ori	r24, 0x04	; 4
     90a:	88 bb       	out	0x18, r24	; 24
     90c:	c5 ff       	sbrs	r28, 5
     90e:	03 c0       	rjmp	.+6      	; 0x916 <lcd_write+0x6a>
     910:	88 b3       	in	r24, 0x18	; 24
     912:	82 60       	ori	r24, 0x02	; 2
     914:	88 bb       	out	0x18, r24	; 24
     916:	c4 ff       	sbrs	r28, 4
     918:	03 c0       	rjmp	.+6      	; 0x920 <lcd_write+0x74>
     91a:	88 b3       	in	r24, 0x18	; 24
     91c:	81 60       	ori	r24, 0x01	; 1
     91e:	88 bb       	out	0x18, r24	; 24
     920:	0e 94 4e 04 	call	0x89c	; 0x89c <toggle_e>
     924:	88 b3       	in	r24, 0x18	; 24
     926:	8f 7e       	andi	r24, 0xEF	; 239
     928:	88 bb       	out	0x18, r24	; 24
     92a:	88 b3       	in	r24, 0x18	; 24
     92c:	8b 7f       	andi	r24, 0xFB	; 251
     92e:	88 bb       	out	0x18, r24	; 24
     930:	88 b3       	in	r24, 0x18	; 24
     932:	8d 7f       	andi	r24, 0xFD	; 253
     934:	88 bb       	out	0x18, r24	; 24
     936:	88 b3       	in	r24, 0x18	; 24
     938:	8e 7f       	andi	r24, 0xFE	; 254
     93a:	88 bb       	out	0x18, r24	; 24
     93c:	c3 ff       	sbrs	r28, 3
     93e:	03 c0       	rjmp	.+6      	; 0x946 <lcd_write+0x9a>
     940:	88 b3       	in	r24, 0x18	; 24
     942:	80 61       	ori	r24, 0x10	; 16
     944:	88 bb       	out	0x18, r24	; 24
     946:	c2 ff       	sbrs	r28, 2
     948:	03 c0       	rjmp	.+6      	; 0x950 <lcd_write+0xa4>
     94a:	88 b3       	in	r24, 0x18	; 24
     94c:	84 60       	ori	r24, 0x04	; 4
     94e:	88 bb       	out	0x18, r24	; 24
     950:	c1 ff       	sbrs	r28, 1
     952:	03 c0       	rjmp	.+6      	; 0x95a <lcd_write+0xae>
     954:	88 b3       	in	r24, 0x18	; 24
     956:	82 60       	ori	r24, 0x02	; 2
     958:	88 bb       	out	0x18, r24	; 24
     95a:	c0 ff       	sbrs	r28, 0
     95c:	03 c0       	rjmp	.+6      	; 0x964 <lcd_write+0xb8>
     95e:	88 b3       	in	r24, 0x18	; 24
     960:	81 60       	ori	r24, 0x01	; 1
     962:	88 bb       	out	0x18, r24	; 24
     964:	0e 94 4e 04 	call	0x89c	; 0x89c <toggle_e>
     968:	88 b3       	in	r24, 0x18	; 24
     96a:	81 60       	ori	r24, 0x01	; 1
     96c:	88 bb       	out	0x18, r24	; 24
     96e:	88 b3       	in	r24, 0x18	; 24
     970:	82 60       	ori	r24, 0x02	; 2
     972:	88 bb       	out	0x18, r24	; 24
     974:	88 b3       	in	r24, 0x18	; 24
     976:	84 60       	ori	r24, 0x04	; 4
     978:	88 bb       	out	0x18, r24	; 24
     97a:	88 b3       	in	r24, 0x18	; 24
     97c:	80 61       	ori	r24, 0x10	; 16
     97e:	88 bb       	out	0x18, r24	; 24
     980:	cf 91       	pop	r28
     982:	08 95       	ret

00000984 <lcd_read>:
     984:	88 23       	and	r24, r24
     986:	21 f0       	breq	.+8      	; 0x990 <lcd_read+0xc>
     988:	88 b3       	in	r24, 0x18	; 24
     98a:	80 62       	ori	r24, 0x20	; 32
     98c:	88 bb       	out	0x18, r24	; 24
     98e:	03 c0       	rjmp	.+6      	; 0x996 <lcd_read+0x12>
     990:	88 b3       	in	r24, 0x18	; 24
     992:	8f 7d       	andi	r24, 0xDF	; 223
     994:	88 bb       	out	0x18, r24	; 24
     996:	88 b3       	in	r24, 0x18	; 24
     998:	80 64       	ori	r24, 0x40	; 64
     99a:	88 bb       	out	0x18, r24	; 24
     99c:	87 b3       	in	r24, 0x17	; 23
     99e:	8e 7f       	andi	r24, 0xFE	; 254
     9a0:	87 bb       	out	0x17, r24	; 23
     9a2:	87 b3       	in	r24, 0x17	; 23
     9a4:	8d 7f       	andi	r24, 0xFD	; 253
     9a6:	87 bb       	out	0x17, r24	; 23
     9a8:	87 b3       	in	r24, 0x17	; 23
     9aa:	8b 7f       	andi	r24, 0xFB	; 251
     9ac:	87 bb       	out	0x17, r24	; 23
     9ae:	87 b3       	in	r24, 0x17	; 23
     9b0:	8f 7e       	andi	r24, 0xEF	; 239
     9b2:	87 bb       	out	0x17, r24	; 23
     9b4:	88 b3       	in	r24, 0x18	; 24
     9b6:	80 68       	ori	r24, 0x80	; 128
     9b8:	88 bb       	out	0x18, r24	; 24
     9ba:	00 c0       	rjmp	.+0      	; 0x9bc <lcd_read+0x38>
     9bc:	b0 99       	sbic	0x16, 0	; 22
     9be:	02 c0       	rjmp	.+4      	; 0x9c4 <lcd_read+0x40>
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	01 c0       	rjmp	.+2      	; 0x9c6 <lcd_read+0x42>
     9c4:	80 e1       	ldi	r24, 0x10	; 16
     9c6:	b1 99       	sbic	0x16, 1	; 22
     9c8:	80 62       	ori	r24, 0x20	; 32
     9ca:	b2 99       	sbic	0x16, 2	; 22
     9cc:	80 64       	ori	r24, 0x40	; 64
     9ce:	b4 99       	sbic	0x16, 4	; 22
     9d0:	80 68       	ori	r24, 0x80	; 128
     9d2:	98 b3       	in	r25, 0x18	; 24
     9d4:	9f 77       	andi	r25, 0x7F	; 127
     9d6:	98 bb       	out	0x18, r25	; 24
     9d8:	00 c0       	rjmp	.+0      	; 0x9da <lcd_read+0x56>
     9da:	98 b3       	in	r25, 0x18	; 24
     9dc:	90 68       	ori	r25, 0x80	; 128
     9de:	98 bb       	out	0x18, r25	; 24
     9e0:	00 c0       	rjmp	.+0      	; 0x9e2 <lcd_read+0x5e>
     9e2:	b0 99       	sbic	0x16, 0	; 22
     9e4:	81 60       	ori	r24, 0x01	; 1
     9e6:	b1 99       	sbic	0x16, 1	; 22
     9e8:	82 60       	ori	r24, 0x02	; 2
     9ea:	b2 99       	sbic	0x16, 2	; 22
     9ec:	84 60       	ori	r24, 0x04	; 4
     9ee:	b4 99       	sbic	0x16, 4	; 22
     9f0:	88 60       	ori	r24, 0x08	; 8
     9f2:	98 b3       	in	r25, 0x18	; 24
     9f4:	9f 77       	andi	r25, 0x7F	; 127
     9f6:	98 bb       	out	0x18, r25	; 24
     9f8:	08 95       	ret

000009fa <lcd_waitbusy>:
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	0e 94 c2 04 	call	0x984	; 0x984 <lcd_read>
     a00:	88 23       	and	r24, r24
     a02:	dc f3       	brlt	.-10     	; 0x9fa <lcd_waitbusy>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	01 97       	sbiw	r24, 0x01	; 1
     a0a:	f1 f7       	brne	.-4      	; 0xa08 <lcd_waitbusy+0xe>
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	0e 94 c2 04 	call	0x984	; 0x984 <lcd_read>
     a12:	08 95       	ret

00000a14 <lcd_command>:
     a14:	cf 93       	push	r28
     a16:	c8 2f       	mov	r28, r24
     a18:	0e 94 fd 04 	call	0x9fa	; 0x9fa <lcd_waitbusy>
     a1c:	60 e0       	ldi	r22, 0x00	; 0
     a1e:	8c 2f       	mov	r24, r28
     a20:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write>
     a24:	cf 91       	pop	r28
     a26:	08 95       	ret

00000a28 <lcd_gotoxy>:
     a28:	61 11       	cpse	r22, r1
     a2a:	04 c0       	rjmp	.+8      	; 0xa34 <lcd_gotoxy+0xc>
     a2c:	80 58       	subi	r24, 0x80	; 128
     a2e:	0e 94 0a 05 	call	0xa14	; 0xa14 <lcd_command>
     a32:	08 95       	ret
     a34:	80 54       	subi	r24, 0x40	; 64
     a36:	0e 94 0a 05 	call	0xa14	; 0xa14 <lcd_command>
     a3a:	08 95       	ret

00000a3c <lcd_clrscr>:
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	0e 94 0a 05 	call	0xa14	; 0xa14 <lcd_command>
     a42:	08 95       	ret

00000a44 <lcd_putc>:
     a44:	cf 93       	push	r28
     a46:	c8 2f       	mov	r28, r24
     a48:	0e 94 fd 04 	call	0x9fa	; 0x9fa <lcd_waitbusy>
     a4c:	ca 30       	cpi	r28, 0x0A	; 10
     a4e:	49 f4       	brne	.+18     	; 0xa62 <lcd_putc+0x1e>
     a50:	80 34       	cpi	r24, 0x40	; 64
     a52:	10 f4       	brcc	.+4      	; 0xa58 <lcd_putc+0x14>
     a54:	80 e4       	ldi	r24, 0x40	; 64
     a56:	01 c0       	rjmp	.+2      	; 0xa5a <lcd_putc+0x16>
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	80 58       	subi	r24, 0x80	; 128
     a5c:	0e 94 0a 05 	call	0xa14	; 0xa14 <lcd_command>
     a60:	04 c0       	rjmp	.+8      	; 0xa6a <lcd_putc+0x26>
     a62:	61 e0       	ldi	r22, 0x01	; 1
     a64:	8c 2f       	mov	r24, r28
     a66:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write>
     a6a:	cf 91       	pop	r28
     a6c:	08 95       	ret

00000a6e <lcd_puts>:
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	fc 01       	movw	r30, r24
     a74:	03 c0       	rjmp	.+6      	; 0xa7c <lcd_puts+0xe>
     a76:	0e 94 22 05 	call	0xa44	; 0xa44 <lcd_putc>
     a7a:	fe 01       	movw	r30, r28
     a7c:	ef 01       	movw	r28, r30
     a7e:	21 96       	adiw	r28, 0x01	; 1
     a80:	80 81       	ld	r24, Z
     a82:	81 11       	cpse	r24, r1
     a84:	f8 cf       	rjmp	.-16     	; 0xa76 <lcd_puts+0x8>
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	08 95       	ret

00000a8c <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     a8c:	1f 93       	push	r17
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
     a92:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     a94:	87 b3       	in	r24, 0x17	; 23
     a96:	80 62       	ori	r24, 0x20	; 32
     a98:	87 bb       	out	0x17, r24	; 23
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     a9a:	87 b3       	in	r24, 0x17	; 23
     a9c:	80 64       	ori	r24, 0x40	; 64
     a9e:	87 bb       	out	0x17, r24	; 23
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     aa0:	87 b3       	in	r24, 0x17	; 23
     aa2:	80 68       	ori	r24, 0x80	; 128
     aa4:	87 bb       	out	0x17, r24	; 23
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     aa6:	87 b3       	in	r24, 0x17	; 23
     aa8:	81 60       	ori	r24, 0x01	; 1
     aaa:	87 bb       	out	0x17, r24	; 23
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     aac:	87 b3       	in	r24, 0x17	; 23
     aae:	82 60       	ori	r24, 0x02	; 2
     ab0:	87 bb       	out	0x17, r24	; 23
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     ab2:	87 b3       	in	r24, 0x17	; 23
     ab4:	84 60       	ori	r24, 0x04	; 4
     ab6:	87 bb       	out	0x17, r24	; 23
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     ab8:	87 b3       	in	r24, 0x17	; 23
     aba:	80 61       	ori	r24, 0x10	; 16
     abc:	87 bb       	out	0x17, r24	; 23
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     abe:	80 e3       	ldi	r24, 0x30	; 48
     ac0:	93 e7       	ldi	r25, 0x73	; 115
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	f1 f7       	brne	.-4      	; 0xac2 <lcd_init+0x36>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
     ac6:	88 b3       	in	r24, 0x18	; 24
     ac8:	82 60       	ori	r24, 0x02	; 2
     aca:	88 bb       	out	0x18, r24	; 24
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
     acc:	88 b3       	in	r24, 0x18	; 24
     ace:	81 60       	ori	r24, 0x01	; 1
     ad0:	88 bb       	out	0x18, r24	; 24
    lcd_e_toggle();
     ad2:	0e 94 4e 04 	call	0x89c	; 0x89c <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     ad6:	80 ef       	ldi	r24, 0xF0	; 240
     ad8:	93 e2       	ldi	r25, 0x23	; 35
     ada:	01 97       	sbiw	r24, 0x01	; 1
     adc:	f1 f7       	brne	.-4      	; 0xada <lcd_init+0x4e>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
     ade:	0e 94 4e 04 	call	0x89c	; 0x89c <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     ae2:	c5 e7       	ldi	r28, 0x75	; 117
     ae4:	d0 e0       	ldi	r29, 0x00	; 0
     ae6:	ce 01       	movw	r24, r28
     ae8:	01 97       	sbiw	r24, 0x01	; 1
     aea:	f1 f7       	brne	.-4      	; 0xae8 <lcd_init+0x5c>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
     aec:	0e 94 4e 04 	call	0x89c	; 0x89c <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     af0:	ce 01       	movw	r24, r28
     af2:	01 97       	sbiw	r24, 0x01	; 1
     af4:	f1 f7       	brne	.-4      	; 0xaf2 <lcd_init+0x66>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     af6:	88 b3       	in	r24, 0x18	; 24
     af8:	8e 7f       	andi	r24, 0xFE	; 254
     afa:	88 bb       	out	0x18, r24	; 24
    lcd_e_toggle();
     afc:	0e 94 4e 04 	call	0x89c	; 0x89c <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     b00:	21 97       	sbiw	r28, 0x01	; 1
     b02:	f1 f7       	brne	.-4      	; 0xb00 <lcd_init+0x74>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     b04:	88 e2       	ldi	r24, 0x28	; 40
     b06:	0e 94 0a 05 	call	0xa14	; 0xa14 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     b0a:	88 e0       	ldi	r24, 0x08	; 8
     b0c:	0e 94 0a 05 	call	0xa14	; 0xa14 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
     b10:	0e 94 1e 05 	call	0xa3c	; 0xa3c <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     b14:	86 e0       	ldi	r24, 0x06	; 6
     b16:	0e 94 0a 05 	call	0xa14	; 0xa14 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     b1a:	81 2f       	mov	r24, r17
     b1c:	0e 94 0a 05 	call	0xa14	; 0xa14 <lcd_command>

}/* lcd_init */
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	1f 91       	pop	r17
     b26:	08 95       	ret

00000b28 <__vector_6>:
//int flag = 0;
/*
use(secondsPacman);
use(secondsRandomLed);
*/
ISR(TIMER1_COMPA_vect) {
     b28:	1f 92       	push	r1
     b2a:	0f 92       	push	r0
     b2c:	0f b6       	in	r0, 0x3f	; 63
     b2e:	0f 92       	push	r0
     b30:	11 24       	eor	r1, r1
     b32:	8f 93       	push	r24
     b34:	9f 93       	push	r25
	seconds++;
     b36:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <seconds>
     b3a:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <seconds+0x1>
     b3e:	01 96       	adiw	r24, 0x01	; 1
     b40:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <seconds+0x1>
     b44:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <seconds>
}
     b48:	9f 91       	pop	r25
     b4a:	8f 91       	pop	r24
     b4c:	0f 90       	pop	r0
     b4e:	0f be       	out	0x3f, r0	; 63
     b50:	0f 90       	pop	r0
     b52:	1f 90       	pop	r1
     b54:	18 95       	reti

00000b56 <game>:


void game( char gameNumber) {
     b56:	cf 93       	push	r28
     b58:	c8 2f       	mov	r28, r24
	lcd_clrscr();
     b5a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <lcd_clrscr>
	lcd_gotoxy(1,0);
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	0e 94 14 05 	call	0xa28	; 0xa28 <lcd_gotoxy>
	lcd_puts("Odabrali ste:");
     b66:	86 e9       	ldi	r24, 0x96	; 150
     b68:	91 e0       	ldi	r25, 0x01	; 1
     b6a:	0e 94 37 05 	call	0xa6e	; 0xa6e <lcd_puts>
	lcd_gotoxy(1,1);
     b6e:	61 e0       	ldi	r22, 0x01	; 1
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	0e 94 14 05 	call	0xa28	; 0xa28 <lcd_gotoxy>
	lcd_puts("igricu broj ");
     b76:	84 ea       	ldi	r24, 0xA4	; 164
     b78:	91 e0       	ldi	r25, 0x01	; 1
     b7a:	0e 94 37 05 	call	0xa6e	; 0xa6e <lcd_puts>
	lcd_putc(gameNumber);
     b7e:	8c 2f       	mov	r24, r28
     b80:	0e 94 22 05 	call	0xa44	; 0xa44 <lcd_putc>
     b84:	2f ef       	ldi	r18, 0xFF	; 255
     b86:	8f ef       	ldi	r24, 0xFF	; 255
     b88:	9c e2       	ldi	r25, 0x2C	; 44
     b8a:	21 50       	subi	r18, 0x01	; 1
     b8c:	80 40       	sbci	r24, 0x00	; 0
     b8e:	90 40       	sbci	r25, 0x00	; 0
     b90:	e1 f7       	brne	.-8      	; 0xb8a <game+0x34>
     b92:	00 c0       	rjmp	.+0      	; 0xb94 <game+0x3e>
     b94:	00 00       	nop
	
	_delay_ms(2000);
	
	if(gameNumber == '1') {
     b96:	c1 33       	cpi	r28, 0x31	; 49
     b98:	19 f4       	brne	.+6      	; 0xba0 <game+0x4a>
		//flag = 1;
		startVjesala();
     b9a:	0e 94 45 07 	call	0xe8a	; 0xe8a <startVjesala>
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <game+0x6e>
	} else if(gameNumber == '2') {
     ba0:	c2 33       	cpi	r28, 0x32	; 50
     ba2:	29 f4       	brne	.+10     	; 0xbae <game+0x58>
		//flag = 2;
		
		randomLed(&seconds);
     ba4:	8e e5       	ldi	r24, 0x5E	; 94
     ba6:	92 e0       	ldi	r25, 0x02	; 2
     ba8:	0e 94 0d 03 	call	0x61a	; 0x61a <randomLed>
     bac:	0b c0       	rjmp	.+22     	; 0xbc4 <game+0x6e>
	} else if(gameNumber == '3') {
     bae:	c3 33       	cpi	r28, 0x33	; 51
     bb0:	29 f4       	brne	.+10     	; 0xbbc <game+0x66>
		//flag = 3;
		
		startPacman(&seconds);
     bb2:	8e e5       	ldi	r24, 0x5E	; 94
     bb4:	92 e0       	ldi	r25, 0x02	; 2
     bb6:	0e 94 a2 01 	call	0x344	; 0x344 <startPacman>
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <game+0x6e>
	} else {
		lcd_puts("Odabrali ste nevazeci broj.");
     bbc:	81 eb       	ldi	r24, 0xB1	; 177
     bbe:	91 e0       	ldi	r25, 0x01	; 1
     bc0:	0e 94 37 05 	call	0xa6e	; 0xa6e <lcd_puts>
	}
	lcd_clrscr();
     bc4:	0e 94 1e 05 	call	0xa3c	; 0xa3c <lcd_clrscr>
	lcd_init(LCD_DISP_ON);
     bc8:	8c e0       	ldi	r24, 0x0C	; 12
     bca:	0e 94 46 05 	call	0xa8c	; 0xa8c <lcd_init>
	lcd_clrscr();
     bce:	0e 94 1e 05 	call	0xa3c	; 0xa3c <lcd_clrscr>
	lcd_puts("Odaberi igricu:");
     bd2:	8d ec       	ldi	r24, 0xCD	; 205
     bd4:	91 e0       	ldi	r25, 0x01	; 1
     bd6:	0e 94 37 05 	call	0xa6e	; 0xa6e <lcd_puts>
     bda:	2f ef       	ldi	r18, 0xFF	; 255
     bdc:	8f e7       	ldi	r24, 0x7F	; 127
     bde:	96 e1       	ldi	r25, 0x16	; 22
     be0:	21 50       	subi	r18, 0x01	; 1
     be2:	80 40       	sbci	r24, 0x00	; 0
     be4:	90 40       	sbci	r25, 0x00	; 0
     be6:	e1 f7       	brne	.-8      	; 0xbe0 <game+0x8a>
     be8:	00 c0       	rjmp	.+0      	; 0xbea <game+0x94>
     bea:	00 00       	nop
	_delay_ms(1000);
	
	return;
	
}
     bec:	cf 91       	pop	r28
     bee:	08 95       	ret

00000bf0 <main>:
		
int main(void) {
	
		//za LCD
		DDRB = _BV(3);
     bf0:	88 e0       	ldi	r24, 0x08	; 8
     bf2:	87 bb       	out	0x17, r24	; 23
		TCCR0 = _BV(WGM01) | _BV(WGM00) | _BV(CS01) | _BV(COM01);
     bf4:	8a e6       	ldi	r24, 0x6A	; 106
     bf6:	83 bf       	out	0x33, r24	; 51
		OCR0 = 128;
     bf8:	80 e8       	ldi	r24, 0x80	; 128
     bfa:	8c bf       	out	0x3c, r24	; 60
		//brojac sekunda
		TIMSK |= _BV(OCIE1A);
     bfc:	89 b7       	in	r24, 0x39	; 57
     bfe:	80 61       	ori	r24, 0x10	; 16
     c00:	89 bf       	out	0x39, r24	; 57
		TCCR1B |= _BV(CS12) | _BV(WGM12);
     c02:	8e b5       	in	r24, 0x2e	; 46
     c04:	8c 60       	ori	r24, 0x0C	; 12
     c06:	8e bd       	out	0x2e, r24	; 46
		OCR1A = TOP_OF_TIMER;
     c08:	80 e8       	ldi	r24, 0x80	; 128
     c0a:	90 e7       	ldi	r25, 0x70	; 112
     c0c:	9b bd       	out	0x2b, r25	; 43
     c0e:	8a bd       	out	0x2a, r24	; 42
		
		DDRD = 0xf0;
     c10:	80 ef       	ldi	r24, 0xF0	; 240
     c12:	81 bb       	out	0x11, r24	; 17
		DDRA = 0xf0;
     c14:	8a bb       	out	0x1a, r24	; 26
		PORTA |= 0xf0;
     c16:	8b b3       	in	r24, 0x1b	; 27
     c18:	80 6f       	ori	r24, 0xF0	; 240
     c1a:	8b bb       	out	0x1b, r24	; 27
		sei();
     c1c:	78 94       	sei

   TCCR1A = _BV(COM1B1) | _BV(WGM10);
   TCCR1B = _BV(WGM12) | _BV(CS11);
   OCR1B = 128;
*/
   lcd_init(LCD_DISP_ON);
     c1e:	8c e0       	ldi	r24, 0x0C	; 12
     c20:	0e 94 46 05 	call	0xa8c	; 0xa8c <lcd_init>
   lcd_clrscr();
     c24:	0e 94 1e 05 	call	0xa3c	; 0xa3c <lcd_clrscr>
   lcd_puts("Odaberi igricu:");
     c28:	8d ec       	ldi	r24, 0xCD	; 205
     c2a:	91 e0       	ldi	r25, 0x01	; 1
     c2c:	0e 94 37 05 	call	0xa6e	; 0xa6e <lcd_puts>
     c30:	2f ef       	ldi	r18, 0xFF	; 255
     c32:	8f e7       	ldi	r24, 0x7F	; 127
     c34:	96 e1       	ldi	r25, 0x16	; 22
     c36:	21 50       	subi	r18, 0x01	; 1
     c38:	80 40       	sbci	r24, 0x00	; 0
     c3a:	90 40       	sbci	r25, 0x00	; 0
     c3c:	e1 f7       	brne	.-8      	; 0xc36 <main+0x46>
     c3e:	00 c0       	rjmp	.+0      	; 0xc40 <main+0x50>
     c40:	00 00       	nop
   _delay_ms(1000);


   while(1) {
	   char pressed = pressedKey();
     c42:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <pressedKey>
	   if(pressed!='/') {
     c46:	8f 32       	cpi	r24, 0x2F	; 47
     c48:	11 f0       	breq	.+4      	; 0xc4e <main+0x5e>
		 game(pressed);  
     c4a:	0e 94 ab 05 	call	0xb56	; 0xb56 <game>
     c4e:	2f ef       	ldi	r18, 0xFF	; 255
     c50:	8f eb       	ldi	r24, 0xBF	; 191
     c52:	96 e0       	ldi	r25, 0x06	; 6
     c54:	21 50       	subi	r18, 0x01	; 1
     c56:	80 40       	sbci	r24, 0x00	; 0
     c58:	90 40       	sbci	r25, 0x00	; 0
     c5a:	e1 f7       	brne	.-8      	; 0xc54 <main+0x64>
     c5c:	00 c0       	rjmp	.+0      	; 0xc5e <main+0x6e>
     c5e:	00 00       	nop
     c60:	f0 cf       	rjmp	.-32     	; 0xc42 <main+0x52>

00000c62 <gameOver>:
int correct=0;
int wrong=3;
int flag=0;

void gameOver() {
	lcd_clrscr();
     c62:	0e 94 1e 05 	call	0xa3c	; 0xa3c <lcd_clrscr>
	lcd_puts("Game over");
     c66:	8d ed       	ldi	r24, 0xDD	; 221
     c68:	91 e0       	ldi	r25, 0x01	; 1
     c6a:	0e 94 37 05 	call	0xa6e	; 0xa6e <lcd_puts>
     c6e:	08 95       	ret

00000c70 <win>:
}

void win() {
	lcd_clrscr();
     c70:	0e 94 1e 05 	call	0xa3c	; 0xa3c <lcd_clrscr>
	lcd_puts("Pogodili ste!");
     c74:	87 ee       	ldi	r24, 0xE7	; 231
     c76:	91 e0       	ldi	r25, 0x01	; 1
     c78:	0e 94 37 05 	call	0xa6e	; 0xa6e <lcd_puts>
     c7c:	08 95       	ret

00000c7e <mainScreen>:
}

void mainScreen() {
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
	lcd_clrscr();
     c82:	0e 94 1e 05 	call	0xa3c	; 0xa3c <lcd_clrscr>
	lcd_gotoxy(1,1);
     c86:	61 e0       	ldi	r22, 0x01	; 1
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	0e 94 14 05 	call	0xa28	; 0xa28 <lcd_gotoxy>
	lcd_puts(lines);
     c8e:	84 ec       	ldi	r24, 0xC4	; 196
     c90:	92 e0       	ldi	r25, 0x02	; 2
     c92:	0e 94 37 05 	call	0xa6e	; 0xa6e <lcd_puts>
	
	lcd_gotoxy(1,0);
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	0e 94 14 05 	call	0xa28	; 0xa28 <lcd_gotoxy>
	leftRight[2]=abc[pos];
     c9e:	e0 91 64 02 	lds	r30, 0x0264	; 0x800264 <pos>
     ca2:	f0 91 65 02 	lds	r31, 0x0265	; 0x800265 <pos+0x1>
     ca6:	eb 57       	subi	r30, 0x7B	; 123
     ca8:	ff 4f       	sbci	r31, 0xFF	; 255
     caa:	80 81       	ld	r24, Z
     cac:	cb e7       	ldi	r28, 0x7B	; 123
     cae:	d0 e0       	ldi	r29, 0x00	; 0
     cb0:	8a 83       	std	Y+2, r24	; 0x02
	lcd_putc(leftRight[0]);
     cb2:	88 81       	ld	r24, Y
     cb4:	0e 94 22 05 	call	0xa44	; 0xa44 <lcd_putc>
	lcd_putc(leftRight[2]);
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	0e 94 22 05 	call	0xa44	; 0xa44 <lcd_putc>
	lcd_putc(leftRight[4]);
     cbe:	8c 81       	ldd	r24, Y+4	; 0x04
     cc0:	0e 94 22 05 	call	0xa44	; 0xa44 <lcd_putc>
     cc4:	2f ef       	ldi	r18, 0xFF	; 255
     cc6:	8f e3       	ldi	r24, 0x3F	; 63
     cc8:	92 e0       	ldi	r25, 0x02	; 2
     cca:	21 50       	subi	r18, 0x01	; 1
     ccc:	80 40       	sbci	r24, 0x00	; 0
     cce:	90 40       	sbci	r25, 0x00	; 0
     cd0:	e1 f7       	brne	.-8      	; 0xcca <mainScreen+0x4c>
     cd2:	00 c0       	rjmp	.+0      	; 0xcd4 <mainScreen+0x56>
     cd4:	00 00       	nop
	
	_delay_ms(100);
	
	if(!wrong) {
     cd6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <wrong>
     cda:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <wrong+0x1>
     cde:	89 2b       	or	r24, r25
     ce0:	11 f4       	brne	.+4      	; 0xce6 <mainScreen+0x68>
		gameOver();
     ce2:	0e 94 31 06 	call	0xc62	; 0xc62 <gameOver>
	}
	if(strstr(lines, word)){
     ce6:	64 eb       	ldi	r22, 0xB4	; 180
     ce8:	72 e0       	ldi	r23, 0x02	; 2
     cea:	84 ec       	ldi	r24, 0xC4	; 196
     cec:	92 e0       	ldi	r25, 0x02	; 2
     cee:	0e 94 73 08 	call	0x10e6	; 0x10e6 <strstr>
     cf2:	89 2b       	or	r24, r25
     cf4:	59 f0       	breq	.+22     	; 0xd0c <mainScreen+0x8e>
     cf6:	2f ef       	ldi	r18, 0xFF	; 255
     cf8:	8f e7       	ldi	r24, 0x7F	; 127
     cfa:	96 e1       	ldi	r25, 0x16	; 22
     cfc:	21 50       	subi	r18, 0x01	; 1
     cfe:	80 40       	sbci	r24, 0x00	; 0
     d00:	90 40       	sbci	r25, 0x00	; 0
     d02:	e1 f7       	brne	.-8      	; 0xcfc <mainScreen+0x7e>
     d04:	00 c0       	rjmp	.+0      	; 0xd06 <mainScreen+0x88>
     d06:	00 00       	nop
		_delay_ms(1000);
		win();
     d08:	0e 94 38 06 	call	0xc70	; 0xc70 <win>
	}
	
}
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	08 95       	ret

00000d12 <wrong_letter>:



void wrong_letter() {
     d12:	cf 93       	push	r28
     d14:	df 93       	push	r29
	lcd_clrscr();
     d16:	0e 94 1e 05 	call	0xa3c	; 0xa3c <lcd_clrscr>
	
	lcd_gotoxy(0,0);
     d1a:	60 e0       	ldi	r22, 0x00	; 0
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	0e 94 14 05 	call	0xa28	; 0xa28 <lcd_gotoxy>
	lcd_puts("Preostali zivoti:");
     d22:	85 ef       	ldi	r24, 0xF5	; 245
     d24:	91 e0       	ldi	r25, 0x01	; 1
     d26:	0e 94 37 05 	call	0xa6e	; 0xa6e <lcd_puts>
	lcd_gotoxy(4,1);
     d2a:	61 e0       	ldi	r22, 0x01	; 1
     d2c:	84 e0       	ldi	r24, 0x04	; 4
     d2e:	0e 94 14 05 	call	0xa28	; 0xa28 <lcd_gotoxy>
	for(int i = 0; i < wrong; i++) {
     d32:	c0 e0       	ldi	r28, 0x00	; 0
     d34:	d0 e0       	ldi	r29, 0x00	; 0
     d36:	05 c0       	rjmp	.+10     	; 0xd42 <wrong_letter+0x30>
		lcd_puts("<3 ");
     d38:	87 e0       	ldi	r24, 0x07	; 7
     d3a:	92 e0       	ldi	r25, 0x02	; 2
     d3c:	0e 94 37 05 	call	0xa6e	; 0xa6e <lcd_puts>
	lcd_clrscr();
	
	lcd_gotoxy(0,0);
	lcd_puts("Preostali zivoti:");
	lcd_gotoxy(4,1);
	for(int i = 0; i < wrong; i++) {
     d40:	21 96       	adiw	r28, 0x01	; 1
     d42:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <wrong>
     d46:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <wrong+0x1>
     d4a:	c8 17       	cp	r28, r24
     d4c:	d9 07       	cpc	r29, r25
     d4e:	a4 f3       	brlt	.-24     	; 0xd38 <wrong_letter+0x26>
     d50:	2f ef       	ldi	r18, 0xFF	; 255
     d52:	8f eb       	ldi	r24, 0xBF	; 191
     d54:	91 e2       	ldi	r25, 0x21	; 33
     d56:	21 50       	subi	r18, 0x01	; 1
     d58:	80 40       	sbci	r24, 0x00	; 0
     d5a:	90 40       	sbci	r25, 0x00	; 0
     d5c:	e1 f7       	brne	.-8      	; 0xd56 <wrong_letter+0x44>
     d5e:	00 c0       	rjmp	.+0      	; 0xd60 <wrong_letter+0x4e>
     d60:	00 00       	nop
		lcd_puts("<3 ");
	}
	_delay_ms(1500);
	
}
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	08 95       	ret

00000d68 <check>:


void check(char letter) {
	for(int i = 0; i <strlen(word); i++) {
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	1c c0       	rjmp	.+56     	; 0xda6 <check+0x3e>
		if(word[i]==letter) {
     d6e:	f9 01       	movw	r30, r18
     d70:	ec 54       	subi	r30, 0x4C	; 76
     d72:	fd 4f       	sbci	r31, 0xFD	; 253
     d74:	90 81       	ld	r25, Z
     d76:	98 13       	cpse	r25, r24
     d78:	14 c0       	rjmp	.+40     	; 0xda2 <check+0x3a>
			lines[i]=letter;
     d7a:	f9 01       	movw	r30, r18
     d7c:	ec 53       	subi	r30, 0x3C	; 60
     d7e:	fd 4f       	sbci	r31, 0xFD	; 253
     d80:	80 83       	st	Z, r24
			correct++;	
     d82:	40 91 62 02 	lds	r20, 0x0262	; 0x800262 <correct>
     d86:	50 91 63 02 	lds	r21, 0x0263	; 0x800263 <correct+0x1>
     d8a:	4f 5f       	subi	r20, 0xFF	; 255
     d8c:	5f 4f       	sbci	r21, 0xFF	; 255
     d8e:	50 93 63 02 	sts	0x0263, r21	; 0x800263 <correct+0x1>
     d92:	40 93 62 02 	sts	0x0262, r20	; 0x800262 <correct>
			flag = 1;
     d96:	41 e0       	ldi	r20, 0x01	; 1
     d98:	50 e0       	ldi	r21, 0x00	; 0
     d9a:	50 93 61 02 	sts	0x0261, r21	; 0x800261 <flag+0x1>
     d9e:	40 93 60 02 	sts	0x0260, r20	; 0x800260 <flag>
	
}


void check(char letter) {
	for(int i = 0; i <strlen(word); i++) {
     da2:	2f 5f       	subi	r18, 0xFF	; 255
     da4:	3f 4f       	sbci	r19, 0xFF	; 255
     da6:	e4 eb       	ldi	r30, 0xB4	; 180
     da8:	f2 e0       	ldi	r31, 0x02	; 2
     daa:	01 90       	ld	r0, Z+
     dac:	00 20       	and	r0, r0
     dae:	e9 f7       	brne	.-6      	; 0xdaa <check+0x42>
     db0:	31 97       	sbiw	r30, 0x01	; 1
     db2:	e4 5b       	subi	r30, 0xB4	; 180
     db4:	f2 40       	sbci	r31, 0x02	; 2
     db6:	2e 17       	cp	r18, r30
     db8:	3f 07       	cpc	r19, r31
     dba:	c8 f2       	brcs	.-78     	; 0xd6e <check+0x6>
			correct++;	
			flag = 1;
		}
		
	}
	mainScreen();
     dbc:	0e 94 3f 06 	call	0xc7e	; 0xc7e <mainScreen>
	if(flag){
     dc0:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <flag>
     dc4:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <flag+0x1>
     dc8:	89 2b       	or	r24, r25
     dca:	79 f4       	brne	.+30     	; 0xdea <check+0x82>
		return;
	}
	wrong_letter();
     dcc:	0e 94 89 06 	call	0xd12	; 0xd12 <wrong_letter>
	wrong--;
     dd0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <wrong>
     dd4:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <wrong+0x1>
     dd8:	01 97       	sbiw	r24, 0x01	; 1
     dda:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <wrong+0x1>
     dde:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <wrong>
	wrong_letter();
     de2:	0e 94 89 06 	call	0xd12	; 0xd12 <wrong_letter>
	mainScreen();
     de6:	0e 94 3f 06 	call	0xc7e	; 0xc7e <mainScreen>
     dea:	08 95       	ret

00000dec <letter>:
	
}

void letter() {
	if(PIND & _BV(5)) {
     dec:	85 9b       	sbis	0x10, 5	; 16
     dee:	12 c0       	rjmp	.+36     	; 0xe14 <letter+0x28>
	
		pos-=1;
     df0:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <pos>
     df4:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <pos+0x1>
     df8:	01 97       	sbiw	r24, 0x01	; 1
     dfa:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <pos+0x1>
     dfe:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <pos>
		if(pos==-1) {
     e02:	01 96       	adiw	r24, 0x01	; 1
     e04:	c1 f4       	brne	.+48     	; 0xe36 <letter+0x4a>
			pos=21;
     e06:	85 e1       	ldi	r24, 0x15	; 21
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <pos+0x1>
     e0e:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <pos>
     e12:	11 c0       	rjmp	.+34     	; 0xe36 <letter+0x4a>
		}
	}else if(PIND & _BV(7)) {
     e14:	87 9b       	sbis	0x10, 7	; 16
     e16:	0f c0       	rjmp	.+30     	; 0xe36 <letter+0x4a>
		
		pos+=1;
     e18:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <pos>
     e1c:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <pos+0x1>
     e20:	01 96       	adiw	r24, 0x01	; 1
     e22:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <pos+0x1>
     e26:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <pos>
		if(pos==22) {
     e2a:	46 97       	sbiw	r24, 0x16	; 22
     e2c:	21 f4       	brne	.+8      	; 0xe36 <letter+0x4a>
			pos=0;
     e2e:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <pos+0x1>
     e32:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <pos>
		}
	} 
	
	lcd_gotoxy(2,0);
     e36:	60 e0       	ldi	r22, 0x00	; 0
     e38:	82 e0       	ldi	r24, 0x02	; 2
     e3a:	0e 94 14 05 	call	0xa28	; 0xa28 <lcd_gotoxy>
	leftRight[2]=abc[pos];
     e3e:	e0 91 64 02 	lds	r30, 0x0264	; 0x800264 <pos>
     e42:	f0 91 65 02 	lds	r31, 0x0265	; 0x800265 <pos+0x1>
     e46:	eb 57       	subi	r30, 0x7B	; 123
     e48:	ff 4f       	sbci	r31, 0xFF	; 255
     e4a:	80 81       	ld	r24, Z
     e4c:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <leftRight+0x2>
	lcd_putc(leftRight[2]);
     e50:	0e 94 22 05 	call	0xa44	; 0xa44 <lcd_putc>
     e54:	8f ef       	ldi	r24, 0xFF	; 255
     e56:	9f e7       	ldi	r25, 0x7F	; 127
     e58:	24 e0       	ldi	r18, 0x04	; 4
     e5a:	81 50       	subi	r24, 0x01	; 1
     e5c:	90 40       	sbci	r25, 0x00	; 0
     e5e:	20 40       	sbci	r18, 0x00	; 0
     e60:	e1 f7       	brne	.-8      	; 0xe5a <letter+0x6e>
     e62:	00 c0       	rjmp	.+0      	; 0xe64 <letter+0x78>
     e64:	00 00       	nop
	_delay_ms(200);
	
	if(PIND & _BV(6) || PIND & _BV(4)) {
     e66:	86 99       	sbic	0x10, 6	; 16
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <letter+0x82>
     e6a:	84 9b       	sbis	0x10, 4	; 16
     e6c:	0d c0       	rjmp	.+26     	; 0xe88 <letter+0x9c>
		
		//korisnik je odabrao letter
		flag = 0;
     e6e:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <flag+0x1>
     e72:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <flag>
		check(abc[pos]);
     e76:	e0 91 64 02 	lds	r30, 0x0264	; 0x800264 <pos>
     e7a:	f0 91 65 02 	lds	r31, 0x0265	; 0x800265 <pos+0x1>
     e7e:	eb 57       	subi	r30, 0x7B	; 123
     e80:	ff 4f       	sbci	r31, 0xFF	; 255
     e82:	80 81       	ld	r24, Z
     e84:	0e 94 b4 06 	call	0xd68	; 0xd68 <check>
     e88:	08 95       	ret

00000e8a <startVjesala>:
	}
	
}

void startVjesala(void) {
	lcd_clrscr();
     e8a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <lcd_clrscr>
	lcd_gotoxy(4,0);
     e8e:	60 e0       	ldi	r22, 0x00	; 0
     e90:	84 e0       	ldi	r24, 0x04	; 4
     e92:	0e 94 14 05 	call	0xa28	; 0xa28 <lcd_gotoxy>
	lcd_puts("VJESALA");
     e96:	8b e0       	ldi	r24, 0x0B	; 11
     e98:	92 e0       	ldi	r25, 0x02	; 2
     e9a:	0e 94 37 05 	call	0xa6e	; 0xa6e <lcd_puts>
     e9e:	2f ef       	ldi	r18, 0xFF	; 255
     ea0:	8f ef       	ldi	r24, 0xFF	; 255
     ea2:	9c e2       	ldi	r25, 0x2C	; 44
     ea4:	21 50       	subi	r18, 0x01	; 1
     ea6:	80 40       	sbci	r24, 0x00	; 0
     ea8:	90 40       	sbci	r25, 0x00	; 0
     eaa:	e1 f7       	brne	.-8      	; 0xea4 <startVjesala+0x1a>
     eac:	00 c0       	rjmp	.+0      	; 0xeae <startVjesala+0x24>
     eae:	00 00       	nop
	_delay_ms(2000);
	
	//upute
	
	lcd_clrscr();
     eb0:	0e 94 1e 05 	call	0xa3c	; 0xa3c <lcd_clrscr>
	lcd_gotoxy(4,0);
     eb4:	60 e0       	ldi	r22, 0x00	; 0
     eb6:	84 e0       	ldi	r24, 0x04	; 4
     eb8:	0e 94 14 05 	call	0xa28	; 0xa28 <lcd_gotoxy>
	lcd_puts("UPUTE:");
     ebc:	83 e1       	ldi	r24, 0x13	; 19
     ebe:	92 e0       	ldi	r25, 0x02	; 2
     ec0:	0e 94 37 05 	call	0xa6e	; 0xa6e <lcd_puts>
     ec4:	2f ef       	ldi	r18, 0xFF	; 255
     ec6:	8f ef       	ldi	r24, 0xFF	; 255
     ec8:	9c e2       	ldi	r25, 0x2C	; 44
     eca:	21 50       	subi	r18, 0x01	; 1
     ecc:	80 40       	sbci	r24, 0x00	; 0
     ece:	90 40       	sbci	r25, 0x00	; 0
     ed0:	e1 f7       	brne	.-8      	; 0xeca <startVjesala+0x40>
     ed2:	00 c0       	rjmp	.+0      	; 0xed4 <startVjesala+0x4a>
     ed4:	00 00       	nop
	_delay_ms(2000);
	lcd_clrscr();
     ed6:	0e 94 1e 05 	call	0xa3c	; 0xa3c <lcd_clrscr>
	lcd_gotoxy(0,0);
     eda:	60 e0       	ldi	r22, 0x00	; 0
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	0e 94 14 05 	call	0xa28	; 0xa28 <lcd_gotoxy>
	lcd_puts("< pritisni 1");
     ee2:	8a e1       	ldi	r24, 0x1A	; 26
     ee4:	92 e0       	ldi	r25, 0x02	; 2
     ee6:	0e 94 37 05 	call	0xa6e	; 0xa6e <lcd_puts>
	lcd_gotoxy(0,1);
     eea:	61 e0       	ldi	r22, 0x01	; 1
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	0e 94 14 05 	call	0xa28	; 0xa28 <lcd_gotoxy>
	lcd_puts("> pritisni 3");
     ef2:	87 e2       	ldi	r24, 0x27	; 39
     ef4:	92 e0       	ldi	r25, 0x02	; 2
     ef6:	0e 94 37 05 	call	0xa6e	; 0xa6e <lcd_puts>
     efa:	2f ef       	ldi	r18, 0xFF	; 255
     efc:	8f e7       	ldi	r24, 0x7F	; 127
     efe:	93 e4       	ldi	r25, 0x43	; 67
     f00:	21 50       	subi	r18, 0x01	; 1
     f02:	80 40       	sbci	r24, 0x00	; 0
     f04:	90 40       	sbci	r25, 0x00	; 0
     f06:	e1 f7       	brne	.-8      	; 0xf00 <startVjesala+0x76>
     f08:	00 c0       	rjmp	.+0      	; 0xf0a <startVjesala+0x80>
     f0a:	00 00       	nop
	_delay_ms(3000);
	lcd_clrscr();
     f0c:	0e 94 1e 05 	call	0xa3c	; 0xa3c <lcd_clrscr>
	lcd_gotoxy(0,0);
     f10:	60 e0       	ldi	r22, 0x00	; 0
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	0e 94 14 05 	call	0xa28	; 0xa28 <lcd_gotoxy>
	lcd_puts("za odabir slova");
     f18:	84 e3       	ldi	r24, 0x34	; 52
     f1a:	92 e0       	ldi	r25, 0x02	; 2
     f1c:	0e 94 37 05 	call	0xa6e	; 0xa6e <lcd_puts>
	lcd_gotoxy(0,1);
     f20:	61 e0       	ldi	r22, 0x01	; 1
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	0e 94 14 05 	call	0xa28	; 0xa28 <lcd_gotoxy>
	lcd_puts("pritisni 2");
     f28:	84 e4       	ldi	r24, 0x44	; 68
     f2a:	92 e0       	ldi	r25, 0x02	; 2
     f2c:	0e 94 37 05 	call	0xa6e	; 0xa6e <lcd_puts>
     f30:	2f ef       	ldi	r18, 0xFF	; 255
     f32:	8f e7       	ldi	r24, 0x7F	; 127
     f34:	93 e4       	ldi	r25, 0x43	; 67
     f36:	21 50       	subi	r18, 0x01	; 1
     f38:	80 40       	sbci	r24, 0x00	; 0
     f3a:	90 40       	sbci	r25, 0x00	; 0
     f3c:	e1 f7       	brne	.-8      	; 0xf36 <startVjesala+0xac>
     f3e:	00 c0       	rjmp	.+0      	; 0xf40 <startVjesala+0xb6>
     f40:	00 00       	nop
	_delay_ms(3000);

	
	int randomNumber = 0;
	randomNumber = TCNT0 % 10;
     f42:	22 b7       	in	r18, 0x32	; 50
     f44:	8d ec       	ldi	r24, 0xCD	; 205
     f46:	28 9f       	mul	r18, r24
     f48:	81 2d       	mov	r24, r1
     f4a:	11 24       	eor	r1, r1
     f4c:	86 95       	lsr	r24
     f4e:	86 95       	lsr	r24
     f50:	86 95       	lsr	r24
     f52:	88 0f       	add	r24, r24
     f54:	98 2f       	mov	r25, r24
     f56:	99 0f       	add	r25, r25
     f58:	99 0f       	add	r25, r25
     f5a:	89 0f       	add	r24, r25
     f5c:	28 1b       	sub	r18, r24
     f5e:	82 2f       	mov	r24, r18
     f60:	90 e0       	ldi	r25, 0x00	; 0
	
	
	//crtice
	
	
	strcpy(word,words[randomNumber]);
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	bc 01       	movw	r22, r24
     f68:	66 0f       	add	r22, r22
     f6a:	77 1f       	adc	r23, r23
     f6c:	66 0f       	add	r22, r22
     f6e:	77 1f       	adc	r23, r23
     f70:	66 0f       	add	r22, r22
     f72:	77 1f       	adc	r23, r23
     f74:	68 1b       	sub	r22, r24
     f76:	79 0b       	sbc	r23, r25
     f78:	65 56       	subi	r22, 0x65	; 101
     f7a:	7f 4f       	sbci	r23, 0xFF	; 255
     f7c:	84 eb       	ldi	r24, 0xB4	; 180
     f7e:	92 e0       	ldi	r25, 0x02	; 2
     f80:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <strcpy>
	int length=strlen(word);
     f84:	e4 eb       	ldi	r30, 0xB4	; 180
     f86:	f2 e0       	ldi	r31, 0x02	; 2
     f88:	01 90       	ld	r0, Z+
     f8a:	00 20       	and	r0, r0
     f8c:	e9 f7       	brne	.-6      	; 0xf88 <startVjesala+0xfe>
     f8e:	31 97       	sbiw	r30, 0x01	; 1
     f90:	e4 5b       	subi	r30, 0xB4	; 180
     f92:	f2 40       	sbci	r31, 0x02	; 2
	int i;
	
	for( i = 0; i < length; i++) {
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	06 c0       	rjmp	.+12     	; 0xfa6 <startVjesala+0x11c>
		lines[i] = '_';
     f9a:	dc 01       	movw	r26, r24
     f9c:	ac 53       	subi	r26, 0x3C	; 60
     f9e:	bd 4f       	sbci	r27, 0xFD	; 253
     fa0:	2f e5       	ldi	r18, 0x5F	; 95
     fa2:	2c 93       	st	X, r18
	
	strcpy(word,words[randomNumber]);
	int length=strlen(word);
	int i;
	
	for( i = 0; i < length; i++) {
     fa4:	01 96       	adiw	r24, 0x01	; 1
     fa6:	8e 17       	cp	r24, r30
     fa8:	9f 07       	cpc	r25, r31
     faa:	bc f3       	brlt	.-18     	; 0xf9a <startVjesala+0x110>
		lines[i] = '_';
	}
	lines[i] = '\0';
     fac:	fc 01       	movw	r30, r24
     fae:	ec 53       	subi	r30, 0x3C	; 60
     fb0:	fd 4f       	sbci	r31, 0xFD	; 253
     fb2:	10 82       	st	Z, r1
	
	mainScreen();
     fb4:	0e 94 3f 06 	call	0xc7e	; 0xc7e <mainScreen>
	
	
	while(1) {
		
		
		letter();
     fb8:	0e 94 f6 06 	call	0xdec	; 0xdec <letter>
     fbc:	2f ef       	ldi	r18, 0xFF	; 255
     fbe:	8f e1       	ldi	r24, 0x1F	; 31
     fc0:	91 e0       	ldi	r25, 0x01	; 1
     fc2:	21 50       	subi	r18, 0x01	; 1
     fc4:	80 40       	sbci	r24, 0x00	; 0
     fc6:	90 40       	sbci	r25, 0x00	; 0
     fc8:	e1 f7       	brne	.-8      	; 0xfc2 <startVjesala+0x138>
     fca:	00 c0       	rjmp	.+0      	; 0xfcc <startVjesala+0x142>
     fcc:	00 00       	nop
     fce:	f4 cf       	rjmp	.-24     	; 0xfb8 <startVjesala+0x12e>

00000fd0 <__divmodhi4>:
     fd0:	97 fb       	bst	r25, 7
     fd2:	07 2e       	mov	r0, r23
     fd4:	16 f4       	brtc	.+4      	; 0xfda <__divmodhi4+0xa>
     fd6:	00 94       	com	r0
     fd8:	07 d0       	rcall	.+14     	; 0xfe8 <__divmodhi4_neg1>
     fda:	77 fd       	sbrc	r23, 7
     fdc:	09 d0       	rcall	.+18     	; 0xff0 <__divmodhi4_neg2>
     fde:	0e 94 fc 07 	call	0xff8	; 0xff8 <__udivmodhi4>
     fe2:	07 fc       	sbrc	r0, 7
     fe4:	05 d0       	rcall	.+10     	; 0xff0 <__divmodhi4_neg2>
     fe6:	3e f4       	brtc	.+14     	; 0xff6 <__divmodhi4_exit>

00000fe8 <__divmodhi4_neg1>:
     fe8:	90 95       	com	r25
     fea:	81 95       	neg	r24
     fec:	9f 4f       	sbci	r25, 0xFF	; 255
     fee:	08 95       	ret

00000ff0 <__divmodhi4_neg2>:
     ff0:	70 95       	com	r23
     ff2:	61 95       	neg	r22
     ff4:	7f 4f       	sbci	r23, 0xFF	; 255

00000ff6 <__divmodhi4_exit>:
     ff6:	08 95       	ret

00000ff8 <__udivmodhi4>:
     ff8:	aa 1b       	sub	r26, r26
     ffa:	bb 1b       	sub	r27, r27
     ffc:	51 e1       	ldi	r21, 0x11	; 17
     ffe:	07 c0       	rjmp	.+14     	; 0x100e <__udivmodhi4_ep>

00001000 <__udivmodhi4_loop>:
    1000:	aa 1f       	adc	r26, r26
    1002:	bb 1f       	adc	r27, r27
    1004:	a6 17       	cp	r26, r22
    1006:	b7 07       	cpc	r27, r23
    1008:	10 f0       	brcs	.+4      	; 0x100e <__udivmodhi4_ep>
    100a:	a6 1b       	sub	r26, r22
    100c:	b7 0b       	sbc	r27, r23

0000100e <__udivmodhi4_ep>:
    100e:	88 1f       	adc	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	5a 95       	dec	r21
    1014:	a9 f7       	brne	.-22     	; 0x1000 <__udivmodhi4_loop>
    1016:	80 95       	com	r24
    1018:	90 95       	com	r25
    101a:	bc 01       	movw	r22, r24
    101c:	cd 01       	movw	r24, r26
    101e:	08 95       	ret

00001020 <do_rand>:
    1020:	8f 92       	push	r8
    1022:	9f 92       	push	r9
    1024:	af 92       	push	r10
    1026:	bf 92       	push	r11
    1028:	cf 92       	push	r12
    102a:	df 92       	push	r13
    102c:	ef 92       	push	r14
    102e:	ff 92       	push	r15
    1030:	cf 93       	push	r28
    1032:	df 93       	push	r29
    1034:	ec 01       	movw	r28, r24
    1036:	68 81       	ld	r22, Y
    1038:	79 81       	ldd	r23, Y+1	; 0x01
    103a:	8a 81       	ldd	r24, Y+2	; 0x02
    103c:	9b 81       	ldd	r25, Y+3	; 0x03
    103e:	61 15       	cp	r22, r1
    1040:	71 05       	cpc	r23, r1
    1042:	81 05       	cpc	r24, r1
    1044:	91 05       	cpc	r25, r1
    1046:	21 f4       	brne	.+8      	; 0x1050 <do_rand+0x30>
    1048:	64 e2       	ldi	r22, 0x24	; 36
    104a:	79 ed       	ldi	r23, 0xD9	; 217
    104c:	8b e5       	ldi	r24, 0x5B	; 91
    104e:	97 e0       	ldi	r25, 0x07	; 7
    1050:	2d e1       	ldi	r18, 0x1D	; 29
    1052:	33 ef       	ldi	r19, 0xF3	; 243
    1054:	41 e0       	ldi	r20, 0x01	; 1
    1056:	50 e0       	ldi	r21, 0x00	; 0
    1058:	0e 94 8d 08 	call	0x111a	; 0x111a <__divmodsi4>
    105c:	49 01       	movw	r8, r18
    105e:	5a 01       	movw	r10, r20
    1060:	9b 01       	movw	r18, r22
    1062:	ac 01       	movw	r20, r24
    1064:	a7 ea       	ldi	r26, 0xA7	; 167
    1066:	b1 e4       	ldi	r27, 0x41	; 65
    1068:	0e 94 ac 08 	call	0x1158	; 0x1158 <__muluhisi3>
    106c:	6b 01       	movw	r12, r22
    106e:	7c 01       	movw	r14, r24
    1070:	ac ee       	ldi	r26, 0xEC	; 236
    1072:	b4 ef       	ldi	r27, 0xF4	; 244
    1074:	a5 01       	movw	r20, r10
    1076:	94 01       	movw	r18, r8
    1078:	0e 94 ba 08 	call	0x1174	; 0x1174 <__mulohisi3>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	8c 0d       	add	r24, r12
    1082:	9d 1d       	adc	r25, r13
    1084:	ae 1d       	adc	r26, r14
    1086:	bf 1d       	adc	r27, r15
    1088:	b7 ff       	sbrs	r27, 7
    108a:	03 c0       	rjmp	.+6      	; 0x1092 <do_rand+0x72>
    108c:	01 97       	sbiw	r24, 0x01	; 1
    108e:	a1 09       	sbc	r26, r1
    1090:	b0 48       	sbci	r27, 0x80	; 128
    1092:	88 83       	st	Y, r24
    1094:	99 83       	std	Y+1, r25	; 0x01
    1096:	aa 83       	std	Y+2, r26	; 0x02
    1098:	bb 83       	std	Y+3, r27	; 0x03
    109a:	9f 77       	andi	r25, 0x7F	; 127
    109c:	df 91       	pop	r29
    109e:	cf 91       	pop	r28
    10a0:	ff 90       	pop	r15
    10a2:	ef 90       	pop	r14
    10a4:	df 90       	pop	r13
    10a6:	cf 90       	pop	r12
    10a8:	bf 90       	pop	r11
    10aa:	af 90       	pop	r10
    10ac:	9f 90       	pop	r9
    10ae:	8f 90       	pop	r8
    10b0:	08 95       	ret

000010b2 <rand_r>:
    10b2:	0e 94 10 08 	call	0x1020	; 0x1020 <do_rand>
    10b6:	08 95       	ret

000010b8 <rand>:
    10b8:	80 e6       	ldi	r24, 0x60	; 96
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	0e 94 10 08 	call	0x1020	; 0x1020 <do_rand>
    10c0:	08 95       	ret

000010c2 <srand>:
    10c2:	a0 e0       	ldi	r26, 0x00	; 0
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    10ca:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    10ce:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
    10d2:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
    10d6:	08 95       	ret

000010d8 <strcpy>:
    10d8:	fb 01       	movw	r30, r22
    10da:	dc 01       	movw	r26, r24
    10dc:	01 90       	ld	r0, Z+
    10de:	0d 92       	st	X+, r0
    10e0:	00 20       	and	r0, r0
    10e2:	e1 f7       	brne	.-8      	; 0x10dc <strcpy+0x4>
    10e4:	08 95       	ret

000010e6 <strstr>:
    10e6:	fb 01       	movw	r30, r22
    10e8:	51 91       	ld	r21, Z+
    10ea:	55 23       	and	r21, r21
    10ec:	a9 f0       	breq	.+42     	; 0x1118 <strstr+0x32>
    10ee:	bf 01       	movw	r22, r30
    10f0:	dc 01       	movw	r26, r24
    10f2:	4d 91       	ld	r20, X+
    10f4:	45 17       	cp	r20, r21
    10f6:	41 11       	cpse	r20, r1
    10f8:	e1 f7       	brne	.-8      	; 0x10f2 <strstr+0xc>
    10fa:	59 f4       	brne	.+22     	; 0x1112 <strstr+0x2c>
    10fc:	cd 01       	movw	r24, r26
    10fe:	01 90       	ld	r0, Z+
    1100:	00 20       	and	r0, r0
    1102:	49 f0       	breq	.+18     	; 0x1116 <strstr+0x30>
    1104:	4d 91       	ld	r20, X+
    1106:	40 15       	cp	r20, r0
    1108:	41 11       	cpse	r20, r1
    110a:	c9 f3       	breq	.-14     	; 0x10fe <strstr+0x18>
    110c:	fb 01       	movw	r30, r22
    110e:	41 11       	cpse	r20, r1
    1110:	ef cf       	rjmp	.-34     	; 0x10f0 <strstr+0xa>
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	01 97       	sbiw	r24, 0x01	; 1
    1118:	08 95       	ret

0000111a <__divmodsi4>:
    111a:	05 2e       	mov	r0, r21
    111c:	97 fb       	bst	r25, 7
    111e:	1e f4       	brtc	.+6      	; 0x1126 <__divmodsi4+0xc>
    1120:	00 94       	com	r0
    1122:	0e 94 a4 08 	call	0x1148	; 0x1148 <__negsi2>
    1126:	57 fd       	sbrc	r21, 7
    1128:	07 d0       	rcall	.+14     	; 0x1138 <__divmodsi4_neg2>
    112a:	0e 94 bf 08 	call	0x117e	; 0x117e <__udivmodsi4>
    112e:	07 fc       	sbrc	r0, 7
    1130:	03 d0       	rcall	.+6      	; 0x1138 <__divmodsi4_neg2>
    1132:	4e f4       	brtc	.+18     	; 0x1146 <__divmodsi4_exit>
    1134:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__negsi2>

00001138 <__divmodsi4_neg2>:
    1138:	50 95       	com	r21
    113a:	40 95       	com	r20
    113c:	30 95       	com	r19
    113e:	21 95       	neg	r18
    1140:	3f 4f       	sbci	r19, 0xFF	; 255
    1142:	4f 4f       	sbci	r20, 0xFF	; 255
    1144:	5f 4f       	sbci	r21, 0xFF	; 255

00001146 <__divmodsi4_exit>:
    1146:	08 95       	ret

00001148 <__negsi2>:
    1148:	90 95       	com	r25
    114a:	80 95       	com	r24
    114c:	70 95       	com	r23
    114e:	61 95       	neg	r22
    1150:	7f 4f       	sbci	r23, 0xFF	; 255
    1152:	8f 4f       	sbci	r24, 0xFF	; 255
    1154:	9f 4f       	sbci	r25, 0xFF	; 255
    1156:	08 95       	ret

00001158 <__muluhisi3>:
    1158:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <__umulhisi3>
    115c:	a5 9f       	mul	r26, r21
    115e:	90 0d       	add	r25, r0
    1160:	b4 9f       	mul	r27, r20
    1162:	90 0d       	add	r25, r0
    1164:	a4 9f       	mul	r26, r20
    1166:	80 0d       	add	r24, r0
    1168:	91 1d       	adc	r25, r1
    116a:	11 24       	eor	r1, r1
    116c:	08 95       	ret

0000116e <__mulshisi3>:
    116e:	b7 ff       	sbrs	r27, 7
    1170:	0c 94 ac 08 	jmp	0x1158	; 0x1158 <__muluhisi3>

00001174 <__mulohisi3>:
    1174:	0e 94 ac 08 	call	0x1158	; 0x1158 <__muluhisi3>
    1178:	82 1b       	sub	r24, r18
    117a:	93 0b       	sbc	r25, r19
    117c:	08 95       	ret

0000117e <__udivmodsi4>:
    117e:	a1 e2       	ldi	r26, 0x21	; 33
    1180:	1a 2e       	mov	r1, r26
    1182:	aa 1b       	sub	r26, r26
    1184:	bb 1b       	sub	r27, r27
    1186:	fd 01       	movw	r30, r26
    1188:	0d c0       	rjmp	.+26     	; 0x11a4 <__udivmodsi4_ep>

0000118a <__udivmodsi4_loop>:
    118a:	aa 1f       	adc	r26, r26
    118c:	bb 1f       	adc	r27, r27
    118e:	ee 1f       	adc	r30, r30
    1190:	ff 1f       	adc	r31, r31
    1192:	a2 17       	cp	r26, r18
    1194:	b3 07       	cpc	r27, r19
    1196:	e4 07       	cpc	r30, r20
    1198:	f5 07       	cpc	r31, r21
    119a:	20 f0       	brcs	.+8      	; 0x11a4 <__udivmodsi4_ep>
    119c:	a2 1b       	sub	r26, r18
    119e:	b3 0b       	sbc	r27, r19
    11a0:	e4 0b       	sbc	r30, r20
    11a2:	f5 0b       	sbc	r31, r21

000011a4 <__udivmodsi4_ep>:
    11a4:	66 1f       	adc	r22, r22
    11a6:	77 1f       	adc	r23, r23
    11a8:	88 1f       	adc	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	1a 94       	dec	r1
    11ae:	69 f7       	brne	.-38     	; 0x118a <__udivmodsi4_loop>
    11b0:	60 95       	com	r22
    11b2:	70 95       	com	r23
    11b4:	80 95       	com	r24
    11b6:	90 95       	com	r25
    11b8:	9b 01       	movw	r18, r22
    11ba:	ac 01       	movw	r20, r24
    11bc:	bd 01       	movw	r22, r26
    11be:	cf 01       	movw	r24, r30
    11c0:	08 95       	ret

000011c2 <__umulhisi3>:
    11c2:	a2 9f       	mul	r26, r18
    11c4:	b0 01       	movw	r22, r0
    11c6:	b3 9f       	mul	r27, r19
    11c8:	c0 01       	movw	r24, r0
    11ca:	a3 9f       	mul	r26, r19
    11cc:	70 0d       	add	r23, r0
    11ce:	81 1d       	adc	r24, r1
    11d0:	11 24       	eor	r1, r1
    11d2:	91 1d       	adc	r25, r1
    11d4:	b2 9f       	mul	r27, r18
    11d6:	70 0d       	add	r23, r0
    11d8:	81 1d       	adc	r24, r1
    11da:	11 24       	eor	r1, r1
    11dc:	91 1d       	adc	r25, r1
    11de:	08 95       	ret

000011e0 <_exit>:
    11e0:	f8 94       	cli

000011e2 <__stop_program>:
    11e2:	ff cf       	rjmp	.-2      	; 0x11e2 <__stop_program>
