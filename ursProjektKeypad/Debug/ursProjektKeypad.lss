
ursProjektKeypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000180  00800060  00000b56  00000bea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002a  008001e0  008001e0  00000d6a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d6a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d1b  00000000  00000000  00000f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d3b  00000000  00000000  00002c6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010df  00000000  00000000  000039a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000308  00000000  00000000  00004a88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b2  00000000  00000000  00004d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c32  00000000  00000000  00005342  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00005f74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e5       	ldi	r30, 0x56	; 86
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3e       	cpi	r26, 0xE0	; 224
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	a0 ee       	ldi	r26, 0xE0	; 224
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 30       	cpi	r26, 0x0A	; 10
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 86 03 	call	0x70c	; 0x70c <main>
  8a:	0c 94 a9 05 	jmp	0xb52	; 0xb52 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <check_direction>:
#include "lcd.h"
#include "RandomLed.h"
#define TOP_OF_TIMER 28800

int check_direction(void) {
	DDRD = 0xf0;
  92:	80 ef       	ldi	r24, 0xF0	; 240
  94:	81 bb       	out	0x11, r24	; 17
	
	while(1) {
			if(PIND & _BV(7))
  96:	87 99       	sbic	0x10, 7	; 16
  98:	09 c0       	rjmp	.+18     	; 0xac <check_direction+0x1a>
			{
				return 1; //left
			}

			else if(PIND & _BV(6))
  9a:	86 99       	sbic	0x10, 6	; 16
  9c:	0a c0       	rjmp	.+20     	; 0xb2 <check_direction+0x20>
			{
				return 2; //
			}
			else if(PIND & _BV(5))
  9e:	85 99       	sbic	0x10, 5	; 16
  a0:	0b c0       	rjmp	.+22     	; 0xb8 <check_direction+0x26>
			{
				return 3;
				
			}
			else if(PIND & _BV(4))
  a2:	84 9b       	sbis	0x10, 4	; 16
  a4:	f8 cf       	rjmp	.-16     	; 0x96 <check_direction+0x4>
			{
				return 3;
  a6:	83 e0       	ldi	r24, 0x03	; 3
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	08 95       	ret
	DDRD = 0xf0;
	
	while(1) {
			if(PIND & _BV(7))
			{
				return 1; //left
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	08 95       	ret
			}

			else if(PIND & _BV(6))
			{
				return 2; //
  b2:	82 e0       	ldi	r24, 0x02	; 2
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	08 95       	ret
			}
			else if(PIND & _BV(5))
			{
				return 3;
  b8:	83 e0       	ldi	r24, 0x03	; 3
  ba:	90 e0       	ldi	r25, 0x00	; 0
				return 3;
				
			}
	}

}
  bc:	08 95       	ret

000000be <__vector_6>:
#include "lcd.h"
#include "RandomLed.h"
#define TOP_OF_TIMER 28800

int seconds = 0;
ISR(TIMER1_COMPA_vect) {
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
	seconds++;
  cc:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <__data_end>
  d0:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <__data_end+0x1>
  d4:	01 96       	adiw	r24, 0x01	; 1
  d6:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <__data_end+0x1>
  da:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <__data_end>
}
  de:	9f 91       	pop	r25
  e0:	8f 91       	pop	r24
  e2:	0f 90       	pop	r0
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	0f 90       	pop	r0
  e8:	1f 90       	pop	r1
  ea:	18 95       	reti

000000ec <randNumber>:


int randNumber()
{
	int num = 0;
	num = TCNT0 % 4;
  ec:	82 b7       	in	r24, 0x32	; 50
  ee:	83 70       	andi	r24, 0x03	; 3
	return num;
}
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	08 95       	ret

000000f4 <check_activity>:
void check_activity(int *punti, int *ledOn, int brLedice)
{
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	8b 01       	movw	r16, r22
  fe:	ea 01       	movw	r28, r20
	PORTA ^= _BV(7 - *ledOn);
 100:	6b b3       	in	r22, 0x1b	; 27
 102:	f8 01       	movw	r30, r16
 104:	20 81       	ld	r18, Z
 106:	31 81       	ldd	r19, Z+1	; 0x01
 108:	47 e0       	ldi	r20, 0x07	; 7
 10a:	50 e0       	ldi	r21, 0x00	; 0
 10c:	42 1b       	sub	r20, r18
 10e:	53 0b       	sbc	r21, r19
 110:	21 e0       	ldi	r18, 0x01	; 1
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <check_activity+0x26>
 116:	22 0f       	add	r18, r18
 118:	33 1f       	adc	r19, r19
 11a:	4a 95       	dec	r20
 11c:	e2 f7       	brpl	.-8      	; 0x116 <check_activity+0x22>
 11e:	26 27       	eor	r18, r22
 120:	2b bb       	out	0x1b, r18	; 27
	if(brLedice == *ledOn)
 122:	20 81       	ld	r18, Z
 124:	31 81       	ldd	r19, Z+1	; 0x01
 126:	2c 17       	cp	r18, r28
 128:	3d 07       	cpc	r19, r29
 12a:	41 f4       	brne	.+16     	; 0x13c <check_activity+0x48>
	{
		(*punti)++;
 12c:	fc 01       	movw	r30, r24
 12e:	20 81       	ld	r18, Z
 130:	31 81       	ldd	r19, Z+1	; 0x01
 132:	2f 5f       	subi	r18, 0xFF	; 255
 134:	3f 4f       	sbci	r19, 0xFF	; 255
 136:	31 83       	std	Z+1, r19	; 0x01
 138:	20 83       	st	Z, r18
 13a:	19 c0       	rjmp	.+50     	; 0x16e <check_activity+0x7a>
	}
	else{
		lcd_gotoxy(4, 0);
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	84 e0       	ldi	r24, 0x04	; 4
 140:	0e 94 db 02 	call	0x5b6	; 0x5b6 <lcd_gotoxy>
		lcd_puts("Pogresno");
 144:	80 e2       	ldi	r24, 0x20	; 32
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	0e 94 fe 02 	call	0x5fc	; 0x5fc <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14c:	ff ef       	ldi	r31, 0xFF	; 255
 14e:	2f ef       	ldi	r18, 0xFF	; 255
 150:	8c e2       	ldi	r24, 0x2C	; 44
 152:	f1 50       	subi	r31, 0x01	; 1
 154:	20 40       	sbci	r18, 0x00	; 0
 156:	80 40       	sbci	r24, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <check_activity+0x5e>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <check_activity+0x68>
 15c:	00 00       	nop
		_delay_ms(2000);
		lcd_gotoxy(4, 0);
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	84 e0       	ldi	r24, 0x04	; 4
 162:	0e 94 db 02 	call	0x5b6	; 0x5b6 <lcd_gotoxy>
		lcd_puts("        ");
 166:	89 e2       	ldi	r24, 0x29	; 41
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	0e 94 fe 02 	call	0x5fc	; 0x5fc <lcd_puts>
 16e:	e9 e9       	ldi	r30, 0x99	; 153
 170:	f5 e1       	ldi	r31, 0x15	; 21
 172:	31 97       	sbiw	r30, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <check_activity+0x7e>
 176:	00 c0       	rjmp	.+0      	; 0x178 <check_activity+0x84>
	}
	
	_delay_ms(3);
	while((PIND & _BV(7 - brLedice)));
 178:	80 b3       	in	r24, 0x10	; 16
 17a:	27 e0       	ldi	r18, 0x07	; 7
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	2c 1b       	sub	r18, r28
 180:	3d 0b       	sbc	r19, r29
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <check_activity+0x96>
 186:	95 95       	asr	r25
 188:	87 95       	ror	r24
 18a:	2a 95       	dec	r18
 18c:	e2 f7       	brpl	.-8      	; 0x186 <check_activity+0x92>
 18e:	80 fd       	sbrc	r24, 0
 190:	f3 cf       	rjmp	.-26     	; 0x178 <check_activity+0x84>
	*ledOn = randNumber();
 192:	0e 94 76 00 	call	0xec	; 0xec <randNumber>
 196:	f8 01       	movw	r30, r16
 198:	91 83       	std	Z+1, r25	; 0x01
 19a:	80 83       	st	Z, r24
	PORTA ^= _BV(7 - *ledOn);
 19c:	6b b3       	in	r22, 0x1b	; 27
 19e:	27 e0       	ldi	r18, 0x07	; 7
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	28 1b       	sub	r18, r24
 1a4:	39 0b       	sbc	r19, r25
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <check_activity+0xbc>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	2a 95       	dec	r18
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <check_activity+0xb8>
 1b4:	86 27       	eor	r24, r22
 1b6:	8b bb       	out	0x1b, r24	; 27
	return;
}
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	1f 91       	pop	r17
 1be:	0f 91       	pop	r16
 1c0:	08 95       	ret

000001c2 <randomLed>:
void randomLed(void)
{
 1c2:	ef 92       	push	r14
 1c4:	ff 92       	push	r15
 1c6:	0f 93       	push	r16
 1c8:	1f 93       	push	r17
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	00 d0       	rcall	.+0      	; 0x1d0 <randomLed+0xe>
 1d0:	00 d0       	rcall	.+0      	; 0x1d2 <randomLed+0x10>
 1d2:	cd b7       	in	r28, 0x3d	; 61
 1d4:	de b7       	in	r29, 0x3e	; 62

	lcd_clrscr();
 1d6:	0e 94 e5 02 	call	0x5ca	; 0x5ca <lcd_clrscr>
	int gameOn = 1;
	int ledOn = 0;
 1da:	1a 82       	std	Y+2, r1	; 0x02
 1dc:	19 82       	std	Y+1, r1	; 0x01
	int punti = 0;
 1de:	1c 82       	std	Y+4, r1	; 0x04
 1e0:	1b 82       	std	Y+3, r1	; 0x03
	PORTA ^= _BV(7 - ledOn);
 1e2:	8b b3       	in	r24, 0x1b	; 27
 1e4:	80 58       	subi	r24, 0x80	; 128
 1e6:	8b bb       	out	0x1b, r24	; 27
	sei();
 1e8:	78 94       	sei
}
void randomLed(void)
{

	lcd_clrscr();
	int gameOn = 1;
 1ea:	01 e0       	ldi	r16, 0x01	; 1
 1ec:	10 e0       	ldi	r17, 0x00	; 0
	int ledOn = 0;
	int punti = 0;
	PORTA ^= _BV(7 - ledOn);
	sei();
	while(gameOn){
 1ee:	ac c0       	rjmp	.+344    	; 0x348 <__EEPROM_REGION_LENGTH__+0x148>
		if(seconds == 40)
 1f0:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <__data_end>
 1f4:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <__data_end+0x1>
 1f8:	88 97       	sbiw	r24, 0x28	; 40
 1fa:	69 f5       	brne	.+90     	; 0x256 <__EEPROM_REGION_LENGTH__+0x56>
		{
			lcd_clrscr();
 1fc:	0e 94 e5 02 	call	0x5ca	; 0x5ca <lcd_clrscr>
			lcd_gotoxy(0, 0);
 200:	60 e0       	ldi	r22, 0x00	; 0
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	0e 94 db 02 	call	0x5b6	; 0x5b6 <lcd_gotoxy>
			lcd_puts("Vrijeme isetklo!");
 208:	82 e3       	ldi	r24, 0x32	; 50
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	0e 94 fe 02 	call	0x5fc	; 0x5fc <lcd_puts>
			lcd_gotoxy(0, 1);
 210:	61 e0       	ldi	r22, 0x01	; 1
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	0e 94 db 02 	call	0x5b6	; 0x5b6 <lcd_gotoxy>
			lcd_putc('0' + (punti / 10));
 218:	8b 81       	ldd	r24, Y+3	; 0x03
 21a:	9c 81       	ldd	r25, Y+4	; 0x04
 21c:	0a e0       	ldi	r16, 0x0A	; 10
 21e:	10 e0       	ldi	r17, 0x00	; 0
 220:	b8 01       	movw	r22, r16
 222:	0e 94 60 05 	call	0xac0	; 0xac0 <__divmodhi4>
 226:	80 e3       	ldi	r24, 0x30	; 48
 228:	86 0f       	add	r24, r22
 22a:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <lcd_putc>
			lcd_putc('0' + (punti % 10));
 22e:	8b 81       	ldd	r24, Y+3	; 0x03
 230:	9c 81       	ldd	r25, Y+4	; 0x04
 232:	b8 01       	movw	r22, r16
 234:	0e 94 60 05 	call	0xac0	; 0xac0 <__divmodhi4>
 238:	80 5d       	subi	r24, 0xD0	; 208
 23a:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <lcd_putc>
 23e:	2f ef       	ldi	r18, 0xFF	; 255
 240:	8f e3       	ldi	r24, 0x3F	; 63
 242:	9b e0       	ldi	r25, 0x0B	; 11
 244:	21 50       	subi	r18, 0x01	; 1
 246:	80 40       	sbci	r24, 0x00	; 0
 248:	90 40       	sbci	r25, 0x00	; 0
 24a:	e1 f7       	brne	.-8      	; 0x244 <__EEPROM_REGION_LENGTH__+0x44>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <__EEPROM_REGION_LENGTH__+0x4e>
 24e:	00 00       	nop
			gameOn = 0;
 250:	00 e0       	ldi	r16, 0x00	; 0
 252:	10 e0       	ldi	r17, 0x00	; 0
 254:	79 c0       	rjmp	.+242    	; 0x348 <__EEPROM_REGION_LENGTH__+0x148>
			_delay_ms(500);
		}
		else{
			if((PIND & _BV(7)) && gameOn)
 256:	87 9b       	sbis	0x10, 7	; 16
 258:	0d c0       	rjmp	.+26     	; 0x274 <__EEPROM_REGION_LENGTH__+0x74>
 25a:	01 15       	cp	r16, r1
 25c:	11 05       	cpc	r17, r1
 25e:	51 f0       	breq	.+20     	; 0x274 <__EEPROM_REGION_LENGTH__+0x74>
			{
				check_activity(&punti, &ledOn, 0);
 260:	40 e0       	ldi	r20, 0x00	; 0
 262:	50 e0       	ldi	r21, 0x00	; 0
 264:	be 01       	movw	r22, r28
 266:	6f 5f       	subi	r22, 0xFF	; 255
 268:	7f 4f       	sbci	r23, 0xFF	; 255
 26a:	ce 01       	movw	r24, r28
 26c:	03 96       	adiw	r24, 0x03	; 3
 26e:	0e 94 7a 00 	call	0xf4	; 0xf4 <check_activity>
 272:	2c c0       	rjmp	.+88     	; 0x2cc <__EEPROM_REGION_LENGTH__+0xcc>
			}
			
			else if((PIND & _BV(6)) && gameOn)
 274:	86 9b       	sbis	0x10, 6	; 16
 276:	0d c0       	rjmp	.+26     	; 0x292 <__EEPROM_REGION_LENGTH__+0x92>
 278:	01 15       	cp	r16, r1
 27a:	11 05       	cpc	r17, r1
 27c:	51 f0       	breq	.+20     	; 0x292 <__EEPROM_REGION_LENGTH__+0x92>
			{
				check_activity(&punti, &ledOn, 1);
 27e:	41 e0       	ldi	r20, 0x01	; 1
 280:	50 e0       	ldi	r21, 0x00	; 0
 282:	be 01       	movw	r22, r28
 284:	6f 5f       	subi	r22, 0xFF	; 255
 286:	7f 4f       	sbci	r23, 0xFF	; 255
 288:	ce 01       	movw	r24, r28
 28a:	03 96       	adiw	r24, 0x03	; 3
 28c:	0e 94 7a 00 	call	0xf4	; 0xf4 <check_activity>
 290:	1d c0       	rjmp	.+58     	; 0x2cc <__EEPROM_REGION_LENGTH__+0xcc>
			}
			else if((PIND & _BV(5)) && gameOn)
 292:	85 9b       	sbis	0x10, 5	; 16
 294:	0d c0       	rjmp	.+26     	; 0x2b0 <__EEPROM_REGION_LENGTH__+0xb0>
 296:	01 15       	cp	r16, r1
 298:	11 05       	cpc	r17, r1
 29a:	51 f0       	breq	.+20     	; 0x2b0 <__EEPROM_REGION_LENGTH__+0xb0>
			{
				check_activity(&punti, &ledOn, 2);
 29c:	42 e0       	ldi	r20, 0x02	; 2
 29e:	50 e0       	ldi	r21, 0x00	; 0
 2a0:	be 01       	movw	r22, r28
 2a2:	6f 5f       	subi	r22, 0xFF	; 255
 2a4:	7f 4f       	sbci	r23, 0xFF	; 255
 2a6:	ce 01       	movw	r24, r28
 2a8:	03 96       	adiw	r24, 0x03	; 3
 2aa:	0e 94 7a 00 	call	0xf4	; 0xf4 <check_activity>
 2ae:	0e c0       	rjmp	.+28     	; 0x2cc <__EEPROM_REGION_LENGTH__+0xcc>
				
			}
			else if((PIND & _BV(4)) && gameOn)
 2b0:	84 9b       	sbis	0x10, 4	; 16
 2b2:	0c c0       	rjmp	.+24     	; 0x2cc <__EEPROM_REGION_LENGTH__+0xcc>
 2b4:	01 15       	cp	r16, r1
 2b6:	11 05       	cpc	r17, r1
 2b8:	49 f0       	breq	.+18     	; 0x2cc <__EEPROM_REGION_LENGTH__+0xcc>
			{
				check_activity(&punti, &ledOn, 3);
 2ba:	43 e0       	ldi	r20, 0x03	; 3
 2bc:	50 e0       	ldi	r21, 0x00	; 0
 2be:	be 01       	movw	r22, r28
 2c0:	6f 5f       	subi	r22, 0xFF	; 255
 2c2:	7f 4f       	sbci	r23, 0xFF	; 255
 2c4:	ce 01       	movw	r24, r28
 2c6:	03 96       	adiw	r24, 0x03	; 3
 2c8:	0e 94 7a 00 	call	0xf4	; 0xf4 <check_activity>
				
			}
			if(gameOn){
 2cc:	01 15       	cp	r16, r1
 2ce:	11 05       	cpc	r17, r1
 2d0:	d9 f1       	breq	.+118    	; 0x348 <__EEPROM_REGION_LENGTH__+0x148>
				lcd_gotoxy(1, 1);
 2d2:	61 e0       	ldi	r22, 0x01	; 1
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	0e 94 db 02 	call	0x5b6	; 0x5b6 <lcd_gotoxy>
				lcd_putc('0' + ledOn);
 2da:	89 81       	ldd	r24, Y+1	; 0x01
 2dc:	80 5d       	subi	r24, 0xD0	; 208
 2de:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <lcd_putc>
				lcd_puts("  ");
 2e2:	8f e2       	ldi	r24, 0x2F	; 47
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	0e 94 fe 02 	call	0x5fc	; 0x5fc <lcd_puts>
				lcd_putc('0' + (punti / 10));
 2ea:	8b 81       	ldd	r24, Y+3	; 0x03
 2ec:	9c 81       	ldd	r25, Y+4	; 0x04
 2ee:	0f 2e       	mov	r0, r31
 2f0:	fa e0       	ldi	r31, 0x0A	; 10
 2f2:	ef 2e       	mov	r14, r31
 2f4:	f1 2c       	mov	r15, r1
 2f6:	f0 2d       	mov	r31, r0
 2f8:	b7 01       	movw	r22, r14
 2fa:	0e 94 60 05 	call	0xac0	; 0xac0 <__divmodhi4>
 2fe:	80 e3       	ldi	r24, 0x30	; 48
 300:	86 0f       	add	r24, r22
 302:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <lcd_putc>
				lcd_putc('0' + (punti % 10));
 306:	8b 81       	ldd	r24, Y+3	; 0x03
 308:	9c 81       	ldd	r25, Y+4	; 0x04
 30a:	b7 01       	movw	r22, r14
 30c:	0e 94 60 05 	call	0xac0	; 0xac0 <__divmodhi4>
 310:	80 5d       	subi	r24, 0xD0	; 208
 312:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <lcd_putc>
				lcd_puts("  ");
 316:	8f e2       	ldi	r24, 0x2F	; 47
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	0e 94 fe 02 	call	0x5fc	; 0x5fc <lcd_puts>
				lcd_putc('0' + (seconds / 10));
 31e:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <__data_end>
 322:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <__data_end+0x1>
 326:	b7 01       	movw	r22, r14
 328:	0e 94 60 05 	call	0xac0	; 0xac0 <__divmodhi4>
 32c:	80 e3       	ldi	r24, 0x30	; 48
 32e:	86 0f       	add	r24, r22
 330:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <lcd_putc>
				lcd_putc('0' + (seconds % 10));
 334:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <__data_end>
 338:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <__data_end+0x1>
 33c:	b7 01       	movw	r22, r14
 33e:	0e 94 60 05 	call	0xac0	; 0xac0 <__divmodhi4>
 342:	80 5d       	subi	r24, 0xD0	; 208
 344:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <lcd_putc>
	int gameOn = 1;
	int ledOn = 0;
	int punti = 0;
	PORTA ^= _BV(7 - ledOn);
	sei();
	while(gameOn){
 348:	01 15       	cp	r16, r1
 34a:	11 05       	cpc	r17, r1
 34c:	09 f0       	breq	.+2      	; 0x350 <__EEPROM_REGION_LENGTH__+0x150>
 34e:	50 cf       	rjmp	.-352    	; 0x1f0 <randomLed+0x2e>
				lcd_putc('0' + (seconds / 10));
				lcd_putc('0' + (seconds % 10));
			}
		}
	}
 350:	0f 90       	pop	r0
 352:	0f 90       	pop	r0
 354:	0f 90       	pop	r0
 356:	0f 90       	pop	r0
 358:	df 91       	pop	r29
 35a:	cf 91       	pop	r28
 35c:	1f 91       	pop	r17
 35e:	0f 91       	pop	r16
 360:	ff 90       	pop	r15
 362:	ef 90       	pop	r14
 364:	08 95       	ret

00000366 <pressedKey>:
{'D','*','0','#'}};

 char pressedKey() {
	 
	 //prva 4 pina treba postaviti na 1, a druga 4 na 0 -> stupci i redovi
	 KEY_DDR = 0xF0;
 366:	80 ef       	ldi	r24, 0xF0	; 240
 368:	8a bb       	out	0x1a, r24	; 26
	 KEY_PRT = 0xFF;
 36a:	8f ef       	ldi	r24, 0xFF	; 255
 36c:	8b bb       	out	0x1b, r24	; 27

		 
		 //provjera dal je pritisnuta tipka, u kojem redu?
		 
		 //slucaj: red 0
		 KEY_PRT=0xEF;  //11101111 -> red 0
 36e:	8f ee       	ldi	r24, 0xEF	; 239
 370:	8b bb       	out	0x1b, r24	; 27
		 colStatus = KEY_PIN & columnMask;
 372:	99 b3       	in	r25, 0x19	; 25
 374:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <columnMask>
 378:	89 23       	and	r24, r25
 37a:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <colStatus>
		 if(colStatus != 0x0F) { // npr C4C3C2C1=1110 to znaci da je pritisnuta tipka u prvom stupcu
 37e:	8f 30       	cpi	r24, 0x0F	; 15
 380:	19 f0       	breq	.+6      	; 0x388 <pressedKey+0x22>
			 rowStatus = 0;
 382:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <rowStatus>
			 goto rows;
 386:	29 c0       	rjmp	.+82     	; 0x3da <pressedKey+0x74>
		 }
		 //slucaj:red 1
		 KEY_PRT=0xDF;  //11011111 -> red 1
 388:	8f ed       	ldi	r24, 0xDF	; 223
 38a:	8b bb       	out	0x1b, r24	; 27
		 colStatus = KEY_PIN & columnMask;
 38c:	99 b3       	in	r25, 0x19	; 25
 38e:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <columnMask>
 392:	89 23       	and	r24, r25
 394:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <colStatus>
		 if(colStatus != 0x0F) {
 398:	8f 30       	cpi	r24, 0x0F	; 15
 39a:	21 f0       	breq	.+8      	; 0x3a4 <pressedKey+0x3e>
			 rowStatus = 1;
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <rowStatus>
			 goto rows;
 3a2:	1b c0       	rjmp	.+54     	; 0x3da <pressedKey+0x74>
		 }
		 //slucaj:red 2
		 KEY_PRT=0xBF;  //10111111 -> red 2
 3a4:	8f eb       	ldi	r24, 0xBF	; 191
 3a6:	8b bb       	out	0x1b, r24	; 27
		 colStatus = KEY_PIN & columnMask;
 3a8:	99 b3       	in	r25, 0x19	; 25
 3aa:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <columnMask>
 3ae:	89 23       	and	r24, r25
 3b0:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <colStatus>
		 if(colStatus != 0x0F) {
 3b4:	8f 30       	cpi	r24, 0x0F	; 15
 3b6:	21 f0       	breq	.+8      	; 0x3c0 <pressedKey+0x5a>
			 rowStatus = 2;
 3b8:	82 e0       	ldi	r24, 0x02	; 2
 3ba:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <rowStatus>
			 goto rows;
 3be:	0d c0       	rjmp	.+26     	; 0x3da <pressedKey+0x74>
		 }
		 //slucaj:red 3
		 KEY_PRT=0x7F;  //01111111 -> red 3
 3c0:	8f e7       	ldi	r24, 0x7F	; 127
 3c2:	8b bb       	out	0x1b, r24	; 27
		 colStatus = KEY_PIN & columnMask;
 3c4:	99 b3       	in	r25, 0x19	; 25
 3c6:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <columnMask>
 3ca:	89 23       	and	r24, r25
 3cc:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <colStatus>
		 if(colStatus != 0x0F) {
 3d0:	8f 30       	cpi	r24, 0x0F	; 15
 3d2:	19 f0       	breq	.+6      	; 0x3da <pressedKey+0x74>
			 rowStatus = 3;
 3d4:	83 e0       	ldi	r24, 0x03	; 3
 3d6:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <rowStatus>
			 goto rows;
		 }
		 
		 //provjera u kojem stupcu je pritisnuta tipka
		 rows:;
		 if(colStatus == 0x0e) {
 3da:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <colStatus>
 3de:	8e 30       	cpi	r24, 0x0E	; 14
 3e0:	39 f4       	brne	.+14     	; 0x3f0 <pressedKey+0x8a>
			 //1110 -> stupac 0
			 return keypad[0][rowStatus];
 3e2:	e0 91 e9 01 	lds	r30, 0x01E9	; 0x8001e9 <rowStatus>
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	e0 5a       	subi	r30, 0xA0	; 160
 3ea:	ff 4f       	sbci	r31, 0xFF	; 255
 3ec:	80 81       	ld	r24, Z
 3ee:	08 95       	ret
			 } else if(colStatus == 0x0d) {
 3f0:	8d 30       	cpi	r24, 0x0D	; 13
 3f2:	39 f4       	brne	.+14     	; 0x402 <__DATA_REGION_LENGTH__+0x2>
			 //1101 -> stupac 1
			 return keypad[1][rowStatus];
 3f4:	e0 91 e9 01 	lds	r30, 0x01E9	; 0x8001e9 <rowStatus>
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	e0 5a       	subi	r30, 0xA0	; 160
 3fc:	ff 4f       	sbci	r31, 0xFF	; 255
 3fe:	84 81       	ldd	r24, Z+4	; 0x04
 400:	08 95       	ret
			 } else if(colStatus == 0x0b) {
 402:	8b 30       	cpi	r24, 0x0B	; 11
 404:	39 f4       	brne	.+14     	; 0x414 <__DATA_REGION_LENGTH__+0x14>
			 //1011 -> stupac 2
			 return keypad[2][rowStatus];
 406:	e0 91 e9 01 	lds	r30, 0x01E9	; 0x8001e9 <rowStatus>
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	e0 5a       	subi	r30, 0xA0	; 160
 40e:	ff 4f       	sbci	r31, 0xFF	; 255
 410:	80 85       	ldd	r24, Z+8	; 0x08
 412:	08 95       	ret
			 } else if(colStatus == 0x07) {
 414:	87 30       	cpi	r24, 0x07	; 7
 416:	39 f4       	brne	.+14     	; 0x426 <__DATA_REGION_LENGTH__+0x26>
			 //0111 -> stupac 3
			 return keypad[3][rowStatus];
 418:	e0 91 e9 01 	lds	r30, 0x01E9	; 0x8001e9 <rowStatus>
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	e0 5a       	subi	r30, 0xA0	; 160
 420:	ff 4f       	sbci	r31, 0xFF	; 255
 422:	84 85       	ldd	r24, Z+12	; 0x0c
 424:	08 95       	ret
		 }

	 return '/';
 426:	8f e2       	ldi	r24, 0x2F	; 47
 428:	08 95       	ret

0000042a <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
 42a:	88 b3       	in	r24, 0x18	; 24
 42c:	80 68       	ori	r24, 0x80	; 128
 42e:	88 bb       	out	0x18, r24	; 24
 430:	00 c0       	rjmp	.+0      	; 0x432 <toggle_e+0x8>
 432:	88 b3       	in	r24, 0x18	; 24
 434:	8f 77       	andi	r24, 0x7F	; 127
 436:	88 bb       	out	0x18, r24	; 24
 438:	08 95       	ret

0000043a <lcd_write>:
 43a:	cf 93       	push	r28
 43c:	c8 2f       	mov	r28, r24
 43e:	66 23       	and	r22, r22
 440:	21 f0       	breq	.+8      	; 0x44a <lcd_write+0x10>
 442:	88 b3       	in	r24, 0x18	; 24
 444:	80 62       	ori	r24, 0x20	; 32
 446:	88 bb       	out	0x18, r24	; 24
 448:	03 c0       	rjmp	.+6      	; 0x450 <lcd_write+0x16>
 44a:	88 b3       	in	r24, 0x18	; 24
 44c:	8f 7d       	andi	r24, 0xDF	; 223
 44e:	88 bb       	out	0x18, r24	; 24
 450:	88 b3       	in	r24, 0x18	; 24
 452:	8f 7b       	andi	r24, 0xBF	; 191
 454:	88 bb       	out	0x18, r24	; 24
 456:	87 b3       	in	r24, 0x17	; 23
 458:	81 60       	ori	r24, 0x01	; 1
 45a:	87 bb       	out	0x17, r24	; 23
 45c:	87 b3       	in	r24, 0x17	; 23
 45e:	82 60       	ori	r24, 0x02	; 2
 460:	87 bb       	out	0x17, r24	; 23
 462:	87 b3       	in	r24, 0x17	; 23
 464:	84 60       	ori	r24, 0x04	; 4
 466:	87 bb       	out	0x17, r24	; 23
 468:	87 b3       	in	r24, 0x17	; 23
 46a:	80 61       	ori	r24, 0x10	; 16
 46c:	87 bb       	out	0x17, r24	; 23
 46e:	88 b3       	in	r24, 0x18	; 24
 470:	8f 7e       	andi	r24, 0xEF	; 239
 472:	88 bb       	out	0x18, r24	; 24
 474:	88 b3       	in	r24, 0x18	; 24
 476:	8b 7f       	andi	r24, 0xFB	; 251
 478:	88 bb       	out	0x18, r24	; 24
 47a:	88 b3       	in	r24, 0x18	; 24
 47c:	8d 7f       	andi	r24, 0xFD	; 253
 47e:	88 bb       	out	0x18, r24	; 24
 480:	88 b3       	in	r24, 0x18	; 24
 482:	8e 7f       	andi	r24, 0xFE	; 254
 484:	88 bb       	out	0x18, r24	; 24
 486:	cc 23       	and	r28, r28
 488:	1c f4       	brge	.+6      	; 0x490 <__stack+0x31>
 48a:	88 b3       	in	r24, 0x18	; 24
 48c:	80 61       	ori	r24, 0x10	; 16
 48e:	88 bb       	out	0x18, r24	; 24
 490:	c6 ff       	sbrs	r28, 6
 492:	03 c0       	rjmp	.+6      	; 0x49a <__stack+0x3b>
 494:	88 b3       	in	r24, 0x18	; 24
 496:	84 60       	ori	r24, 0x04	; 4
 498:	88 bb       	out	0x18, r24	; 24
 49a:	c5 ff       	sbrs	r28, 5
 49c:	03 c0       	rjmp	.+6      	; 0x4a4 <__stack+0x45>
 49e:	88 b3       	in	r24, 0x18	; 24
 4a0:	82 60       	ori	r24, 0x02	; 2
 4a2:	88 bb       	out	0x18, r24	; 24
 4a4:	c4 ff       	sbrs	r28, 4
 4a6:	03 c0       	rjmp	.+6      	; 0x4ae <__stack+0x4f>
 4a8:	88 b3       	in	r24, 0x18	; 24
 4aa:	81 60       	ori	r24, 0x01	; 1
 4ac:	88 bb       	out	0x18, r24	; 24
 4ae:	0e 94 15 02 	call	0x42a	; 0x42a <toggle_e>
 4b2:	88 b3       	in	r24, 0x18	; 24
 4b4:	8f 7e       	andi	r24, 0xEF	; 239
 4b6:	88 bb       	out	0x18, r24	; 24
 4b8:	88 b3       	in	r24, 0x18	; 24
 4ba:	8b 7f       	andi	r24, 0xFB	; 251
 4bc:	88 bb       	out	0x18, r24	; 24
 4be:	88 b3       	in	r24, 0x18	; 24
 4c0:	8d 7f       	andi	r24, 0xFD	; 253
 4c2:	88 bb       	out	0x18, r24	; 24
 4c4:	88 b3       	in	r24, 0x18	; 24
 4c6:	8e 7f       	andi	r24, 0xFE	; 254
 4c8:	88 bb       	out	0x18, r24	; 24
 4ca:	c3 ff       	sbrs	r28, 3
 4cc:	03 c0       	rjmp	.+6      	; 0x4d4 <__stack+0x75>
 4ce:	88 b3       	in	r24, 0x18	; 24
 4d0:	80 61       	ori	r24, 0x10	; 16
 4d2:	88 bb       	out	0x18, r24	; 24
 4d4:	c2 ff       	sbrs	r28, 2
 4d6:	03 c0       	rjmp	.+6      	; 0x4de <__stack+0x7f>
 4d8:	88 b3       	in	r24, 0x18	; 24
 4da:	84 60       	ori	r24, 0x04	; 4
 4dc:	88 bb       	out	0x18, r24	; 24
 4de:	c1 ff       	sbrs	r28, 1
 4e0:	03 c0       	rjmp	.+6      	; 0x4e8 <__stack+0x89>
 4e2:	88 b3       	in	r24, 0x18	; 24
 4e4:	82 60       	ori	r24, 0x02	; 2
 4e6:	88 bb       	out	0x18, r24	; 24
 4e8:	c0 ff       	sbrs	r28, 0
 4ea:	03 c0       	rjmp	.+6      	; 0x4f2 <__stack+0x93>
 4ec:	88 b3       	in	r24, 0x18	; 24
 4ee:	81 60       	ori	r24, 0x01	; 1
 4f0:	88 bb       	out	0x18, r24	; 24
 4f2:	0e 94 15 02 	call	0x42a	; 0x42a <toggle_e>
 4f6:	88 b3       	in	r24, 0x18	; 24
 4f8:	81 60       	ori	r24, 0x01	; 1
 4fa:	88 bb       	out	0x18, r24	; 24
 4fc:	88 b3       	in	r24, 0x18	; 24
 4fe:	82 60       	ori	r24, 0x02	; 2
 500:	88 bb       	out	0x18, r24	; 24
 502:	88 b3       	in	r24, 0x18	; 24
 504:	84 60       	ori	r24, 0x04	; 4
 506:	88 bb       	out	0x18, r24	; 24
 508:	88 b3       	in	r24, 0x18	; 24
 50a:	80 61       	ori	r24, 0x10	; 16
 50c:	88 bb       	out	0x18, r24	; 24
 50e:	cf 91       	pop	r28
 510:	08 95       	ret

00000512 <lcd_read>:
 512:	88 23       	and	r24, r24
 514:	21 f0       	breq	.+8      	; 0x51e <lcd_read+0xc>
 516:	88 b3       	in	r24, 0x18	; 24
 518:	80 62       	ori	r24, 0x20	; 32
 51a:	88 bb       	out	0x18, r24	; 24
 51c:	03 c0       	rjmp	.+6      	; 0x524 <lcd_read+0x12>
 51e:	88 b3       	in	r24, 0x18	; 24
 520:	8f 7d       	andi	r24, 0xDF	; 223
 522:	88 bb       	out	0x18, r24	; 24
 524:	88 b3       	in	r24, 0x18	; 24
 526:	80 64       	ori	r24, 0x40	; 64
 528:	88 bb       	out	0x18, r24	; 24
 52a:	87 b3       	in	r24, 0x17	; 23
 52c:	8e 7f       	andi	r24, 0xFE	; 254
 52e:	87 bb       	out	0x17, r24	; 23
 530:	87 b3       	in	r24, 0x17	; 23
 532:	8d 7f       	andi	r24, 0xFD	; 253
 534:	87 bb       	out	0x17, r24	; 23
 536:	87 b3       	in	r24, 0x17	; 23
 538:	8b 7f       	andi	r24, 0xFB	; 251
 53a:	87 bb       	out	0x17, r24	; 23
 53c:	87 b3       	in	r24, 0x17	; 23
 53e:	8f 7e       	andi	r24, 0xEF	; 239
 540:	87 bb       	out	0x17, r24	; 23
 542:	88 b3       	in	r24, 0x18	; 24
 544:	80 68       	ori	r24, 0x80	; 128
 546:	88 bb       	out	0x18, r24	; 24
 548:	00 c0       	rjmp	.+0      	; 0x54a <lcd_read+0x38>
 54a:	b0 99       	sbic	0x16, 0	; 22
 54c:	02 c0       	rjmp	.+4      	; 0x552 <lcd_read+0x40>
 54e:	80 e0       	ldi	r24, 0x00	; 0
 550:	01 c0       	rjmp	.+2      	; 0x554 <lcd_read+0x42>
 552:	80 e1       	ldi	r24, 0x10	; 16
 554:	b1 99       	sbic	0x16, 1	; 22
 556:	80 62       	ori	r24, 0x20	; 32
 558:	b2 99       	sbic	0x16, 2	; 22
 55a:	80 64       	ori	r24, 0x40	; 64
 55c:	b4 99       	sbic	0x16, 4	; 22
 55e:	80 68       	ori	r24, 0x80	; 128
 560:	98 b3       	in	r25, 0x18	; 24
 562:	9f 77       	andi	r25, 0x7F	; 127
 564:	98 bb       	out	0x18, r25	; 24
 566:	00 c0       	rjmp	.+0      	; 0x568 <lcd_read+0x56>
 568:	98 b3       	in	r25, 0x18	; 24
 56a:	90 68       	ori	r25, 0x80	; 128
 56c:	98 bb       	out	0x18, r25	; 24
 56e:	00 c0       	rjmp	.+0      	; 0x570 <lcd_read+0x5e>
 570:	b0 99       	sbic	0x16, 0	; 22
 572:	81 60       	ori	r24, 0x01	; 1
 574:	b1 99       	sbic	0x16, 1	; 22
 576:	82 60       	ori	r24, 0x02	; 2
 578:	b2 99       	sbic	0x16, 2	; 22
 57a:	84 60       	ori	r24, 0x04	; 4
 57c:	b4 99       	sbic	0x16, 4	; 22
 57e:	88 60       	ori	r24, 0x08	; 8
 580:	98 b3       	in	r25, 0x18	; 24
 582:	9f 77       	andi	r25, 0x7F	; 127
 584:	98 bb       	out	0x18, r25	; 24
 586:	08 95       	ret

00000588 <lcd_waitbusy>:
 588:	80 e0       	ldi	r24, 0x00	; 0
 58a:	0e 94 89 02 	call	0x512	; 0x512 <lcd_read>
 58e:	88 23       	and	r24, r24
 590:	dc f3       	brlt	.-10     	; 0x588 <lcd_waitbusy>
 592:	83 e0       	ldi	r24, 0x03	; 3
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	01 97       	sbiw	r24, 0x01	; 1
 598:	f1 f7       	brne	.-4      	; 0x596 <lcd_waitbusy+0xe>
 59a:	80 e0       	ldi	r24, 0x00	; 0
 59c:	0e 94 89 02 	call	0x512	; 0x512 <lcd_read>
 5a0:	08 95       	ret

000005a2 <lcd_command>:
 5a2:	cf 93       	push	r28
 5a4:	c8 2f       	mov	r28, r24
 5a6:	0e 94 c4 02 	call	0x588	; 0x588 <lcd_waitbusy>
 5aa:	60 e0       	ldi	r22, 0x00	; 0
 5ac:	8c 2f       	mov	r24, r28
 5ae:	0e 94 1d 02 	call	0x43a	; 0x43a <lcd_write>
 5b2:	cf 91       	pop	r28
 5b4:	08 95       	ret

000005b6 <lcd_gotoxy>:
 5b6:	61 11       	cpse	r22, r1
 5b8:	04 c0       	rjmp	.+8      	; 0x5c2 <lcd_gotoxy+0xc>
 5ba:	80 58       	subi	r24, 0x80	; 128
 5bc:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_command>
 5c0:	08 95       	ret
 5c2:	80 54       	subi	r24, 0x40	; 64
 5c4:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_command>
 5c8:	08 95       	ret

000005ca <lcd_clrscr>:
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_command>
 5d0:	08 95       	ret

000005d2 <lcd_putc>:
 5d2:	cf 93       	push	r28
 5d4:	c8 2f       	mov	r28, r24
 5d6:	0e 94 c4 02 	call	0x588	; 0x588 <lcd_waitbusy>
 5da:	ca 30       	cpi	r28, 0x0A	; 10
 5dc:	49 f4       	brne	.+18     	; 0x5f0 <lcd_putc+0x1e>
 5de:	80 34       	cpi	r24, 0x40	; 64
 5e0:	10 f4       	brcc	.+4      	; 0x5e6 <lcd_putc+0x14>
 5e2:	80 e4       	ldi	r24, 0x40	; 64
 5e4:	01 c0       	rjmp	.+2      	; 0x5e8 <lcd_putc+0x16>
 5e6:	80 e0       	ldi	r24, 0x00	; 0
 5e8:	80 58       	subi	r24, 0x80	; 128
 5ea:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_command>
 5ee:	04 c0       	rjmp	.+8      	; 0x5f8 <lcd_putc+0x26>
 5f0:	61 e0       	ldi	r22, 0x01	; 1
 5f2:	8c 2f       	mov	r24, r28
 5f4:	0e 94 1d 02 	call	0x43a	; 0x43a <lcd_write>
 5f8:	cf 91       	pop	r28
 5fa:	08 95       	ret

000005fc <lcd_puts>:
 5fc:	cf 93       	push	r28
 5fe:	df 93       	push	r29
 600:	fc 01       	movw	r30, r24
 602:	03 c0       	rjmp	.+6      	; 0x60a <lcd_puts+0xe>
 604:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <lcd_putc>
 608:	fe 01       	movw	r30, r28
 60a:	ef 01       	movw	r28, r30
 60c:	21 96       	adiw	r28, 0x01	; 1
 60e:	80 81       	ld	r24, Z
 610:	81 11       	cpse	r24, r1
 612:	f8 cf       	rjmp	.-16     	; 0x604 <lcd_puts+0x8>
 614:	df 91       	pop	r29
 616:	cf 91       	pop	r28
 618:	08 95       	ret

0000061a <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 61a:	1f 93       	push	r17
 61c:	cf 93       	push	r28
 61e:	df 93       	push	r29
 620:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 622:	87 b3       	in	r24, 0x17	; 23
 624:	80 62       	ori	r24, 0x20	; 32
 626:	87 bb       	out	0x17, r24	; 23
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 628:	87 b3       	in	r24, 0x17	; 23
 62a:	80 64       	ori	r24, 0x40	; 64
 62c:	87 bb       	out	0x17, r24	; 23
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 62e:	87 b3       	in	r24, 0x17	; 23
 630:	80 68       	ori	r24, 0x80	; 128
 632:	87 bb       	out	0x17, r24	; 23
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 634:	87 b3       	in	r24, 0x17	; 23
 636:	81 60       	ori	r24, 0x01	; 1
 638:	87 bb       	out	0x17, r24	; 23
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 63a:	87 b3       	in	r24, 0x17	; 23
 63c:	82 60       	ori	r24, 0x02	; 2
 63e:	87 bb       	out	0x17, r24	; 23
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 640:	87 b3       	in	r24, 0x17	; 23
 642:	84 60       	ori	r24, 0x04	; 4
 644:	87 bb       	out	0x17, r24	; 23
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 646:	87 b3       	in	r24, 0x17	; 23
 648:	80 61       	ori	r24, 0x10	; 16
 64a:	87 bb       	out	0x17, r24	; 23
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 64c:	80 e3       	ldi	r24, 0x30	; 48
 64e:	93 e7       	ldi	r25, 0x73	; 115
 650:	01 97       	sbiw	r24, 0x01	; 1
 652:	f1 f7       	brne	.-4      	; 0x650 <lcd_init+0x36>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 654:	88 b3       	in	r24, 0x18	; 24
 656:	82 60       	ori	r24, 0x02	; 2
 658:	88 bb       	out	0x18, r24	; 24
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 65a:	88 b3       	in	r24, 0x18	; 24
 65c:	81 60       	ori	r24, 0x01	; 1
 65e:	88 bb       	out	0x18, r24	; 24
    lcd_e_toggle();
 660:	0e 94 15 02 	call	0x42a	; 0x42a <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 664:	80 ef       	ldi	r24, 0xF0	; 240
 666:	93 e2       	ldi	r25, 0x23	; 35
 668:	01 97       	sbiw	r24, 0x01	; 1
 66a:	f1 f7       	brne	.-4      	; 0x668 <lcd_init+0x4e>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 66c:	0e 94 15 02 	call	0x42a	; 0x42a <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 670:	c5 e7       	ldi	r28, 0x75	; 117
 672:	d0 e0       	ldi	r29, 0x00	; 0
 674:	ce 01       	movw	r24, r28
 676:	01 97       	sbiw	r24, 0x01	; 1
 678:	f1 f7       	brne	.-4      	; 0x676 <lcd_init+0x5c>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 67a:	0e 94 15 02 	call	0x42a	; 0x42a <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 67e:	ce 01       	movw	r24, r28
 680:	01 97       	sbiw	r24, 0x01	; 1
 682:	f1 f7       	brne	.-4      	; 0x680 <lcd_init+0x66>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 684:	88 b3       	in	r24, 0x18	; 24
 686:	8e 7f       	andi	r24, 0xFE	; 254
 688:	88 bb       	out	0x18, r24	; 24
    lcd_e_toggle();
 68a:	0e 94 15 02 	call	0x42a	; 0x42a <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 68e:	21 97       	sbiw	r28, 0x01	; 1
 690:	f1 f7       	brne	.-4      	; 0x68e <lcd_init+0x74>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 692:	88 e2       	ldi	r24, 0x28	; 40
 694:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 698:	88 e0       	ldi	r24, 0x08	; 8
 69a:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 69e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 6a2:	86 e0       	ldi	r24, 0x06	; 6
 6a4:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 6a8:	81 2f       	mov	r24, r17
 6aa:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_command>

}/* lcd_init */
 6ae:	df 91       	pop	r29
 6b0:	cf 91       	pop	r28
 6b2:	1f 91       	pop	r17
 6b4:	08 95       	ret

000006b6 <game>:





void game( char gameNumber) {
 6b6:	cf 93       	push	r28
 6b8:	c8 2f       	mov	r28, r24
	lcd_clrscr();
 6ba:	0e 94 e5 02 	call	0x5ca	; 0x5ca <lcd_clrscr>
	lcd_gotoxy(1,0);
 6be:	60 e0       	ldi	r22, 0x00	; 0
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	0e 94 db 02 	call	0x5b6	; 0x5b6 <lcd_gotoxy>
	lcd_puts("Odabrali ste:");
 6c6:	83 e4       	ldi	r24, 0x43	; 67
 6c8:	91 e0       	ldi	r25, 0x01	; 1
 6ca:	0e 94 fe 02 	call	0x5fc	; 0x5fc <lcd_puts>
	lcd_gotoxy(1,1);
 6ce:	61 e0       	ldi	r22, 0x01	; 1
 6d0:	81 e0       	ldi	r24, 0x01	; 1
 6d2:	0e 94 db 02 	call	0x5b6	; 0x5b6 <lcd_gotoxy>
	lcd_puts("igricu broj ");
 6d6:	81 e5       	ldi	r24, 0x51	; 81
 6d8:	91 e0       	ldi	r25, 0x01	; 1
 6da:	0e 94 fe 02 	call	0x5fc	; 0x5fc <lcd_puts>
	lcd_putc(gameNumber);
 6de:	8c 2f       	mov	r24, r28
 6e0:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <lcd_putc>
 6e4:	2f ef       	ldi	r18, 0xFF	; 255
 6e6:	8f ef       	ldi	r24, 0xFF	; 255
 6e8:	9c e2       	ldi	r25, 0x2C	; 44
 6ea:	21 50       	subi	r18, 0x01	; 1
 6ec:	80 40       	sbci	r24, 0x00	; 0
 6ee:	90 40       	sbci	r25, 0x00	; 0
 6f0:	e1 f7       	brne	.-8      	; 0x6ea <game+0x34>
 6f2:	00 c0       	rjmp	.+0      	; 0x6f4 <game+0x3e>
 6f4:	00 00       	nop
	
	_delay_ms(2000);
	
	if(gameNumber == '1') {
 6f6:	c1 33       	cpi	r28, 0x31	; 49
 6f8:	19 f4       	brne	.+6      	; 0x700 <game+0x4a>
		startVjesala();
 6fa:	0e 94 d6 04 	call	0x9ac	; 0x9ac <startVjesala>
 6fe:	04 c0       	rjmp	.+8      	; 0x708 <game+0x52>
	} else if(gameNumber == '2') {
 700:	c2 33       	cpi	r28, 0x32	; 50
 702:	11 f4       	brne	.+4      	; 0x708 <game+0x52>
		randomLed();
 704:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <randomLed>
	}
	
}
 708:	cf 91       	pop	r28
 70a:	08 95       	ret

0000070c <main>:
		
int main(void) {
	
		//za LCD
		DDRB = _BV(3);
 70c:	88 e0       	ldi	r24, 0x08	; 8
 70e:	87 bb       	out	0x17, r24	; 23
		TCCR0 = _BV(WGM01) | _BV(WGM00) | _BV(CS01) | _BV(COM01);
 710:	8a e6       	ldi	r24, 0x6A	; 106
 712:	83 bf       	out	0x33, r24	; 51
		OCR0 = 128;
 714:	80 e8       	ldi	r24, 0x80	; 128
 716:	8c bf       	out	0x3c, r24	; 60
		//brojac sekunda
		TIMSK |= _BV(OCIE1A);
 718:	89 b7       	in	r24, 0x39	; 57
 71a:	80 61       	ori	r24, 0x10	; 16
 71c:	89 bf       	out	0x39, r24	; 57
		TCCR1B |= _BV(CS12) | _BV(WGM12);
 71e:	8e b5       	in	r24, 0x2e	; 46
 720:	8c 60       	ori	r24, 0x0C	; 12
 722:	8e bd       	out	0x2e, r24	; 46
		OCR1A = TOP_OF_TIMER;
 724:	80 e8       	ldi	r24, 0x80	; 128
 726:	90 e7       	ldi	r25, 0x70	; 112
 728:	9b bd       	out	0x2b, r25	; 43
 72a:	8a bd       	out	0x2a, r24	; 42
		
		DDRD = 0xf0;
 72c:	80 ef       	ldi	r24, 0xF0	; 240
 72e:	81 bb       	out	0x11, r24	; 17
		DDRA = 0xf0;
 730:	8a bb       	out	0x1a, r24	; 26
		PORTA |= 0xf0;
 732:	8b b3       	in	r24, 0x1b	; 27
 734:	80 6f       	ori	r24, 0xF0	; 240
 736:	8b bb       	out	0x1b, r24	; 27

   TCCR1A = _BV(COM1B1) | _BV(WGM10);
   TCCR1B = _BV(WGM12) | _BV(CS11);
   OCR1B = 128;
*/
   lcd_init(LCD_DISP_ON);
 738:	8c e0       	ldi	r24, 0x0C	; 12
 73a:	0e 94 0d 03 	call	0x61a	; 0x61a <lcd_init>
   lcd_clrscr();
 73e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <lcd_clrscr>
   lcd_puts("Odaberi igricu:");
 742:	8e e5       	ldi	r24, 0x5E	; 94
 744:	91 e0       	ldi	r25, 0x01	; 1
 746:	0e 94 fe 02 	call	0x5fc	; 0x5fc <lcd_puts>
 74a:	2f ef       	ldi	r18, 0xFF	; 255
 74c:	8f e7       	ldi	r24, 0x7F	; 127
 74e:	96 e1       	ldi	r25, 0x16	; 22
 750:	21 50       	subi	r18, 0x01	; 1
 752:	80 40       	sbci	r24, 0x00	; 0
 754:	90 40       	sbci	r25, 0x00	; 0
 756:	e1 f7       	brne	.-8      	; 0x750 <main+0x44>
 758:	00 c0       	rjmp	.+0      	; 0x75a <main+0x4e>
 75a:	00 00       	nop
   _delay_ms(1000);


   while(1) {
	   char pressed = pressedKey();
 75c:	0e 94 b3 01 	call	0x366	; 0x366 <pressedKey>
	   if(pressed!='/') {
 760:	8f 32       	cpi	r24, 0x2F	; 47
 762:	11 f0       	breq	.+4      	; 0x768 <main+0x5c>
		 game(pressed);  
 764:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <game>
 768:	2f ef       	ldi	r18, 0xFF	; 255
 76a:	8f eb       	ldi	r24, 0xBF	; 191
 76c:	96 e0       	ldi	r25, 0x06	; 6
 76e:	21 50       	subi	r18, 0x01	; 1
 770:	80 40       	sbci	r24, 0x00	; 0
 772:	90 40       	sbci	r25, 0x00	; 0
 774:	e1 f7       	brne	.-8      	; 0x76e <main+0x62>
 776:	00 c0       	rjmp	.+0      	; 0x778 <main+0x6c>
 778:	00 00       	nop
 77a:	f0 cf       	rjmp	.-32     	; 0x75c <main+0x50>

0000077c <gameOver>:
int correct=0;
int wrong=3;
int flag=0;

void gameOver() {
	lcd_clrscr();
 77c:	0e 94 e5 02 	call	0x5ca	; 0x5ca <lcd_clrscr>
	lcd_puts("Game over");
 780:	8e e6       	ldi	r24, 0x6E	; 110
 782:	91 e0       	ldi	r25, 0x01	; 1
 784:	0e 94 fe 02 	call	0x5fc	; 0x5fc <lcd_puts>
 788:	08 95       	ret

0000078a <win>:
}

void win() {
	lcd_clrscr();
 78a:	0e 94 e5 02 	call	0x5ca	; 0x5ca <lcd_clrscr>
	lcd_puts("Pogodili ste!");
 78e:	88 e7       	ldi	r24, 0x78	; 120
 790:	91 e0       	ldi	r25, 0x01	; 1
 792:	0e 94 fe 02 	call	0x5fc	; 0x5fc <lcd_puts>
 796:	08 95       	ret

00000798 <mainScreen>:
}

void mainScreen() {
 798:	cf 93       	push	r28
 79a:	df 93       	push	r29
	lcd_clrscr();
 79c:	0e 94 e5 02 	call	0x5ca	; 0x5ca <lcd_clrscr>
	lcd_gotoxy(1,1);
 7a0:	61 e0       	ldi	r22, 0x01	; 1
 7a2:	81 e0       	ldi	r24, 0x01	; 1
 7a4:	0e 94 db 02 	call	0x5b6	; 0x5b6 <lcd_gotoxy>
	lcd_puts(lines);
 7a8:	8a ef       	ldi	r24, 0xFA	; 250
 7aa:	91 e0       	ldi	r25, 0x01	; 1
 7ac:	0e 94 fe 02 	call	0x5fc	; 0x5fc <lcd_puts>
	
	lcd_gotoxy(1,0);
 7b0:	60 e0       	ldi	r22, 0x00	; 0
 7b2:	81 e0       	ldi	r24, 0x01	; 1
 7b4:	0e 94 db 02 	call	0x5b6	; 0x5b6 <lcd_gotoxy>
	leftRight[2]=abc[pos];
 7b8:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <pos>
 7bc:	f0 91 e7 01 	lds	r31, 0x01E7	; 0x8001e7 <pos+0x1>
 7c0:	e2 58       	subi	r30, 0x82	; 130
 7c2:	ff 4f       	sbci	r31, 0xFF	; 255
 7c4:	80 81       	ld	r24, Z
 7c6:	c4 e7       	ldi	r28, 0x74	; 116
 7c8:	d0 e0       	ldi	r29, 0x00	; 0
 7ca:	8a 83       	std	Y+2, r24	; 0x02
	lcd_putc(leftRight[0]);
 7cc:	88 81       	ld	r24, Y
 7ce:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <lcd_putc>
	lcd_putc(leftRight[2]);
 7d2:	8a 81       	ldd	r24, Y+2	; 0x02
 7d4:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <lcd_putc>
	lcd_putc(leftRight[4]);
 7d8:	8c 81       	ldd	r24, Y+4	; 0x04
 7da:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <lcd_putc>
 7de:	2f ef       	ldi	r18, 0xFF	; 255
 7e0:	8f e3       	ldi	r24, 0x3F	; 63
 7e2:	92 e0       	ldi	r25, 0x02	; 2
 7e4:	21 50       	subi	r18, 0x01	; 1
 7e6:	80 40       	sbci	r24, 0x00	; 0
 7e8:	90 40       	sbci	r25, 0x00	; 0
 7ea:	e1 f7       	brne	.-8      	; 0x7e4 <mainScreen+0x4c>
 7ec:	00 c0       	rjmp	.+0      	; 0x7ee <mainScreen+0x56>
 7ee:	00 00       	nop
	
	_delay_ms(100);
	
	if(!wrong) {
 7f0:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <wrong>
 7f4:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <wrong+0x1>
 7f8:	89 2b       	or	r24, r25
 7fa:	11 f4       	brne	.+4      	; 0x800 <mainScreen+0x68>
		gameOver();
 7fc:	0e 94 be 03 	call	0x77c	; 0x77c <gameOver>
	}
	if(strstr(lines, word)){
 800:	6a ee       	ldi	r22, 0xEA	; 234
 802:	71 e0       	ldi	r23, 0x01	; 1
 804:	8a ef       	ldi	r24, 0xFA	; 250
 806:	91 e0       	ldi	r25, 0x01	; 1
 808:	0e 94 8f 05 	call	0xb1e	; 0xb1e <strstr>
 80c:	89 2b       	or	r24, r25
 80e:	59 f0       	breq	.+22     	; 0x826 <mainScreen+0x8e>
 810:	2f ef       	ldi	r18, 0xFF	; 255
 812:	8f e7       	ldi	r24, 0x7F	; 127
 814:	96 e1       	ldi	r25, 0x16	; 22
 816:	21 50       	subi	r18, 0x01	; 1
 818:	80 40       	sbci	r24, 0x00	; 0
 81a:	90 40       	sbci	r25, 0x00	; 0
 81c:	e1 f7       	brne	.-8      	; 0x816 <mainScreen+0x7e>
 81e:	00 c0       	rjmp	.+0      	; 0x820 <mainScreen+0x88>
 820:	00 00       	nop
		_delay_ms(1000);
		win();
 822:	0e 94 c5 03 	call	0x78a	; 0x78a <win>
	}
	
}
 826:	df 91       	pop	r29
 828:	cf 91       	pop	r28
 82a:	08 95       	ret

0000082c <wrong_letter>:



void wrong_letter() {
 82c:	cf 93       	push	r28
 82e:	df 93       	push	r29
	lcd_clrscr();
 830:	0e 94 e5 02 	call	0x5ca	; 0x5ca <lcd_clrscr>
	
	lcd_gotoxy(0,0);
 834:	60 e0       	ldi	r22, 0x00	; 0
 836:	80 e0       	ldi	r24, 0x00	; 0
 838:	0e 94 db 02 	call	0x5b6	; 0x5b6 <lcd_gotoxy>
	lcd_puts("Preostali zivoti:");
 83c:	86 e8       	ldi	r24, 0x86	; 134
 83e:	91 e0       	ldi	r25, 0x01	; 1
 840:	0e 94 fe 02 	call	0x5fc	; 0x5fc <lcd_puts>
	lcd_gotoxy(4,1);
 844:	61 e0       	ldi	r22, 0x01	; 1
 846:	84 e0       	ldi	r24, 0x04	; 4
 848:	0e 94 db 02 	call	0x5b6	; 0x5b6 <lcd_gotoxy>
	for(int i = 0; i < wrong; i++) {
 84c:	c0 e0       	ldi	r28, 0x00	; 0
 84e:	d0 e0       	ldi	r29, 0x00	; 0
 850:	05 c0       	rjmp	.+10     	; 0x85c <wrong_letter+0x30>
		lcd_puts("<3 ");
 852:	88 e9       	ldi	r24, 0x98	; 152
 854:	91 e0       	ldi	r25, 0x01	; 1
 856:	0e 94 fe 02 	call	0x5fc	; 0x5fc <lcd_puts>
	lcd_clrscr();
	
	lcd_gotoxy(0,0);
	lcd_puts("Preostali zivoti:");
	lcd_gotoxy(4,1);
	for(int i = 0; i < wrong; i++) {
 85a:	21 96       	adiw	r28, 0x01	; 1
 85c:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <wrong>
 860:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <wrong+0x1>
 864:	c8 17       	cp	r28, r24
 866:	d9 07       	cpc	r29, r25
 868:	a4 f3       	brlt	.-24     	; 0x852 <wrong_letter+0x26>
 86a:	2f ef       	ldi	r18, 0xFF	; 255
 86c:	8f eb       	ldi	r24, 0xBF	; 191
 86e:	91 e2       	ldi	r25, 0x21	; 33
 870:	21 50       	subi	r18, 0x01	; 1
 872:	80 40       	sbci	r24, 0x00	; 0
 874:	90 40       	sbci	r25, 0x00	; 0
 876:	e1 f7       	brne	.-8      	; 0x870 <wrong_letter+0x44>
 878:	00 c0       	rjmp	.+0      	; 0x87a <wrong_letter+0x4e>
 87a:	00 00       	nop
		lcd_puts("<3 ");
	}
	_delay_ms(1500);
	
}
 87c:	df 91       	pop	r29
 87e:	cf 91       	pop	r28
 880:	08 95       	ret

00000882 <check>:


void check(char letter) {
	for(int i = 0; i <strlen(word); i++) {
 882:	20 e0       	ldi	r18, 0x00	; 0
 884:	30 e0       	ldi	r19, 0x00	; 0
 886:	1c c0       	rjmp	.+56     	; 0x8c0 <check+0x3e>
		if(word[i]==letter) {
 888:	f9 01       	movw	r30, r18
 88a:	e6 51       	subi	r30, 0x16	; 22
 88c:	fe 4f       	sbci	r31, 0xFE	; 254
 88e:	90 81       	ld	r25, Z
 890:	98 13       	cpse	r25, r24
 892:	14 c0       	rjmp	.+40     	; 0x8bc <check+0x3a>
			lines[i]=letter;
 894:	f9 01       	movw	r30, r18
 896:	e6 50       	subi	r30, 0x06	; 6
 898:	fe 4f       	sbci	r31, 0xFE	; 254
 89a:	80 83       	st	Z, r24
			correct++;	
 89c:	40 91 e4 01 	lds	r20, 0x01E4	; 0x8001e4 <correct>
 8a0:	50 91 e5 01 	lds	r21, 0x01E5	; 0x8001e5 <correct+0x1>
 8a4:	4f 5f       	subi	r20, 0xFF	; 255
 8a6:	5f 4f       	sbci	r21, 0xFF	; 255
 8a8:	50 93 e5 01 	sts	0x01E5, r21	; 0x8001e5 <correct+0x1>
 8ac:	40 93 e4 01 	sts	0x01E4, r20	; 0x8001e4 <correct>
			flag = 1;
 8b0:	41 e0       	ldi	r20, 0x01	; 1
 8b2:	50 e0       	ldi	r21, 0x00	; 0
 8b4:	50 93 e3 01 	sts	0x01E3, r21	; 0x8001e3 <flag+0x1>
 8b8:	40 93 e2 01 	sts	0x01E2, r20	; 0x8001e2 <flag>
	
}


void check(char letter) {
	for(int i = 0; i <strlen(word); i++) {
 8bc:	2f 5f       	subi	r18, 0xFF	; 255
 8be:	3f 4f       	sbci	r19, 0xFF	; 255
 8c0:	ea ee       	ldi	r30, 0xEA	; 234
 8c2:	f1 e0       	ldi	r31, 0x01	; 1
 8c4:	01 90       	ld	r0, Z+
 8c6:	00 20       	and	r0, r0
 8c8:	e9 f7       	brne	.-6      	; 0x8c4 <check+0x42>
 8ca:	31 97       	sbiw	r30, 0x01	; 1
 8cc:	ea 5e       	subi	r30, 0xEA	; 234
 8ce:	f1 40       	sbci	r31, 0x01	; 1
 8d0:	2e 17       	cp	r18, r30
 8d2:	3f 07       	cpc	r19, r31
 8d4:	c8 f2       	brcs	.-78     	; 0x888 <check+0x6>
			correct++;	
			flag = 1;
		}
		
	}
	mainScreen();
 8d6:	0e 94 cc 03 	call	0x798	; 0x798 <mainScreen>
	if(flag){
 8da:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <flag>
 8de:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <flag+0x1>
 8e2:	89 2b       	or	r24, r25
 8e4:	79 f4       	brne	.+30     	; 0x904 <check+0x82>
		return;
	}
	wrong_letter();
 8e6:	0e 94 16 04 	call	0x82c	; 0x82c <wrong_letter>
	wrong--;
 8ea:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <wrong>
 8ee:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <wrong+0x1>
 8f2:	01 97       	sbiw	r24, 0x01	; 1
 8f4:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <wrong+0x1>
 8f8:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <wrong>
	wrong_letter();
 8fc:	0e 94 16 04 	call	0x82c	; 0x82c <wrong_letter>
	mainScreen();
 900:	0e 94 cc 03 	call	0x798	; 0x798 <mainScreen>
 904:	08 95       	ret

00000906 <letter>:
	
}

void letter( int direction) {
 906:	cf 93       	push	r28
 908:	df 93       	push	r29
 90a:	ec 01       	movw	r28, r24
	if(direction==1) {
 90c:	81 30       	cpi	r24, 0x01	; 1
 90e:	91 05       	cpc	r25, r1
 910:	91 f4       	brne	.+36     	; 0x936 <letter+0x30>
		pos-=1;
 912:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <pos>
 916:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <pos+0x1>
 91a:	01 97       	sbiw	r24, 0x01	; 1
 91c:	90 93 e7 01 	sts	0x01E7, r25	; 0x8001e7 <pos+0x1>
 920:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <pos>
		if(pos==-1) {
 924:	01 96       	adiw	r24, 0x01	; 1
 926:	c1 f4       	brne	.+48     	; 0x958 <letter+0x52>
			pos=21;
 928:	85 e1       	ldi	r24, 0x15	; 21
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	90 93 e7 01 	sts	0x01E7, r25	; 0x8001e7 <pos+0x1>
 930:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <pos>
 934:	11 c0       	rjmp	.+34     	; 0x958 <letter+0x52>
		}
	}else if(direction==2) {
 936:	02 97       	sbiw	r24, 0x02	; 2
 938:	79 f4       	brne	.+30     	; 0x958 <letter+0x52>
		pos+=1;
 93a:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <pos>
 93e:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <pos+0x1>
 942:	01 96       	adiw	r24, 0x01	; 1
 944:	90 93 e7 01 	sts	0x01E7, r25	; 0x8001e7 <pos+0x1>
 948:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <pos>
		if(pos==22) {
 94c:	46 97       	sbiw	r24, 0x16	; 22
 94e:	21 f4       	brne	.+8      	; 0x958 <letter+0x52>
			pos=0;
 950:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <pos+0x1>
 954:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <pos>
		}
	} 
	
	lcd_gotoxy(2,0);
 958:	60 e0       	ldi	r22, 0x00	; 0
 95a:	82 e0       	ldi	r24, 0x02	; 2
 95c:	0e 94 db 02 	call	0x5b6	; 0x5b6 <lcd_gotoxy>
	leftRight[2]=abc[pos];
 960:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <pos>
 964:	f0 91 e7 01 	lds	r31, 0x01E7	; 0x8001e7 <pos+0x1>
 968:	e2 58       	subi	r30, 0x82	; 130
 96a:	ff 4f       	sbci	r31, 0xFF	; 255
 96c:	80 81       	ld	r24, Z
 96e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <leftRight+0x2>
	lcd_putc(leftRight[2]);
 972:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <lcd_putc>
 976:	8f ef       	ldi	r24, 0xFF	; 255
 978:	9f e7       	ldi	r25, 0x7F	; 127
 97a:	24 e0       	ldi	r18, 0x04	; 4
 97c:	81 50       	subi	r24, 0x01	; 1
 97e:	90 40       	sbci	r25, 0x00	; 0
 980:	20 40       	sbci	r18, 0x00	; 0
 982:	e1 f7       	brne	.-8      	; 0x97c <letter+0x76>
 984:	00 c0       	rjmp	.+0      	; 0x986 <letter+0x80>
 986:	00 00       	nop
	_delay_ms(200);
	
	if(direction==3) {
 988:	23 97       	sbiw	r28, 0x03	; 3
 98a:	69 f4       	brne	.+26     	; 0x9a6 <letter+0xa0>
		//korisnik je odabrao letter
		flag = 0;
 98c:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <flag+0x1>
 990:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <flag>
		check(abc[pos]);
 994:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <pos>
 998:	f0 91 e7 01 	lds	r31, 0x01E7	; 0x8001e7 <pos+0x1>
 99c:	e2 58       	subi	r30, 0x82	; 130
 99e:	ff 4f       	sbci	r31, 0xFF	; 255
 9a0:	80 81       	ld	r24, Z
 9a2:	0e 94 41 04 	call	0x882	; 0x882 <check>
		
	}
	
}
 9a6:	df 91       	pop	r29
 9a8:	cf 91       	pop	r28
 9aa:	08 95       	ret

000009ac <startVjesala>:

void startVjesala(void) {
	lcd_clrscr();
 9ac:	0e 94 e5 02 	call	0x5ca	; 0x5ca <lcd_clrscr>
	lcd_gotoxy(4,0);
 9b0:	60 e0       	ldi	r22, 0x00	; 0
 9b2:	84 e0       	ldi	r24, 0x04	; 4
 9b4:	0e 94 db 02 	call	0x5b6	; 0x5b6 <lcd_gotoxy>
	lcd_puts("VJESALA");
 9b8:	8c e9       	ldi	r24, 0x9C	; 156
 9ba:	91 e0       	ldi	r25, 0x01	; 1
 9bc:	0e 94 fe 02 	call	0x5fc	; 0x5fc <lcd_puts>
 9c0:	2f ef       	ldi	r18, 0xFF	; 255
 9c2:	8f ef       	ldi	r24, 0xFF	; 255
 9c4:	9c e2       	ldi	r25, 0x2C	; 44
 9c6:	21 50       	subi	r18, 0x01	; 1
 9c8:	80 40       	sbci	r24, 0x00	; 0
 9ca:	90 40       	sbci	r25, 0x00	; 0
 9cc:	e1 f7       	brne	.-8      	; 0x9c6 <startVjesala+0x1a>
 9ce:	00 c0       	rjmp	.+0      	; 0x9d0 <startVjesala+0x24>
 9d0:	00 00       	nop
	_delay_ms(2000);
	
	//upute
	
	lcd_clrscr();
 9d2:	0e 94 e5 02 	call	0x5ca	; 0x5ca <lcd_clrscr>
	lcd_gotoxy(4,0);
 9d6:	60 e0       	ldi	r22, 0x00	; 0
 9d8:	84 e0       	ldi	r24, 0x04	; 4
 9da:	0e 94 db 02 	call	0x5b6	; 0x5b6 <lcd_gotoxy>
	lcd_puts("UPUTE:");
 9de:	84 ea       	ldi	r24, 0xA4	; 164
 9e0:	91 e0       	ldi	r25, 0x01	; 1
 9e2:	0e 94 fe 02 	call	0x5fc	; 0x5fc <lcd_puts>
 9e6:	2f ef       	ldi	r18, 0xFF	; 255
 9e8:	8f ef       	ldi	r24, 0xFF	; 255
 9ea:	9c e2       	ldi	r25, 0x2C	; 44
 9ec:	21 50       	subi	r18, 0x01	; 1
 9ee:	80 40       	sbci	r24, 0x00	; 0
 9f0:	90 40       	sbci	r25, 0x00	; 0
 9f2:	e1 f7       	brne	.-8      	; 0x9ec <startVjesala+0x40>
 9f4:	00 c0       	rjmp	.+0      	; 0x9f6 <startVjesala+0x4a>
 9f6:	00 00       	nop
	_delay_ms(2000);
	lcd_clrscr();
 9f8:	0e 94 e5 02 	call	0x5ca	; 0x5ca <lcd_clrscr>
	lcd_gotoxy(0,0);
 9fc:	60 e0       	ldi	r22, 0x00	; 0
 9fe:	80 e0       	ldi	r24, 0x00	; 0
 a00:	0e 94 db 02 	call	0x5b6	; 0x5b6 <lcd_gotoxy>
	lcd_puts("< pritisni 1");
 a04:	8b ea       	ldi	r24, 0xAB	; 171
 a06:	91 e0       	ldi	r25, 0x01	; 1
 a08:	0e 94 fe 02 	call	0x5fc	; 0x5fc <lcd_puts>
	lcd_gotoxy(0,1);
 a0c:	61 e0       	ldi	r22, 0x01	; 1
 a0e:	80 e0       	ldi	r24, 0x00	; 0
 a10:	0e 94 db 02 	call	0x5b6	; 0x5b6 <lcd_gotoxy>
	lcd_puts("> pritisni 3");
 a14:	88 eb       	ldi	r24, 0xB8	; 184
 a16:	91 e0       	ldi	r25, 0x01	; 1
 a18:	0e 94 fe 02 	call	0x5fc	; 0x5fc <lcd_puts>
 a1c:	2f ef       	ldi	r18, 0xFF	; 255
 a1e:	8f e7       	ldi	r24, 0x7F	; 127
 a20:	93 e4       	ldi	r25, 0x43	; 67
 a22:	21 50       	subi	r18, 0x01	; 1
 a24:	80 40       	sbci	r24, 0x00	; 0
 a26:	90 40       	sbci	r25, 0x00	; 0
 a28:	e1 f7       	brne	.-8      	; 0xa22 <startVjesala+0x76>
 a2a:	00 c0       	rjmp	.+0      	; 0xa2c <startVjesala+0x80>
 a2c:	00 00       	nop
	_delay_ms(3000);
	lcd_clrscr();
 a2e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <lcd_clrscr>
	lcd_gotoxy(0,0);
 a32:	60 e0       	ldi	r22, 0x00	; 0
 a34:	80 e0       	ldi	r24, 0x00	; 0
 a36:	0e 94 db 02 	call	0x5b6	; 0x5b6 <lcd_gotoxy>
	lcd_puts("za odabir slova");
 a3a:	85 ec       	ldi	r24, 0xC5	; 197
 a3c:	91 e0       	ldi	r25, 0x01	; 1
 a3e:	0e 94 fe 02 	call	0x5fc	; 0x5fc <lcd_puts>
	lcd_gotoxy(0,1);
 a42:	61 e0       	ldi	r22, 0x01	; 1
 a44:	80 e0       	ldi	r24, 0x00	; 0
 a46:	0e 94 db 02 	call	0x5b6	; 0x5b6 <lcd_gotoxy>
	lcd_puts("pritisni 2");
 a4a:	85 ed       	ldi	r24, 0xD5	; 213
 a4c:	91 e0       	ldi	r25, 0x01	; 1
 a4e:	0e 94 fe 02 	call	0x5fc	; 0x5fc <lcd_puts>
 a52:	2f ef       	ldi	r18, 0xFF	; 255
 a54:	8f e7       	ldi	r24, 0x7F	; 127
 a56:	93 e4       	ldi	r25, 0x43	; 67
 a58:	21 50       	subi	r18, 0x01	; 1
 a5a:	80 40       	sbci	r24, 0x00	; 0
 a5c:	90 40       	sbci	r25, 0x00	; 0
 a5e:	e1 f7       	brne	.-8      	; 0xa58 <startVjesala+0xac>
 a60:	00 c0       	rjmp	.+0      	; 0xa62 <startVjesala+0xb6>
 a62:	00 00       	nop
	
	
	//crtice
	
	
	strcpy(word,words[randomNumber]);
 a64:	64 e9       	ldi	r22, 0x94	; 148
 a66:	70 e0       	ldi	r23, 0x00	; 0
 a68:	8a ee       	ldi	r24, 0xEA	; 234
 a6a:	91 e0       	ldi	r25, 0x01	; 1
 a6c:	0e 94 88 05 	call	0xb10	; 0xb10 <strcpy>
	int length=strlen(word);
 a70:	ea ee       	ldi	r30, 0xEA	; 234
 a72:	f1 e0       	ldi	r31, 0x01	; 1
 a74:	01 90       	ld	r0, Z+
 a76:	00 20       	and	r0, r0
 a78:	e9 f7       	brne	.-6      	; 0xa74 <startVjesala+0xc8>
 a7a:	31 97       	sbiw	r30, 0x01	; 1
 a7c:	ea 5e       	subi	r30, 0xEA	; 234
 a7e:	f1 40       	sbci	r31, 0x01	; 1
	int i;
	
	for( i = 0; i < length; i++) {
 a80:	80 e0       	ldi	r24, 0x00	; 0
 a82:	90 e0       	ldi	r25, 0x00	; 0
 a84:	06 c0       	rjmp	.+12     	; 0xa92 <startVjesala+0xe6>
		lines[i] = '_';
 a86:	dc 01       	movw	r26, r24
 a88:	a6 50       	subi	r26, 0x06	; 6
 a8a:	be 4f       	sbci	r27, 0xFE	; 254
 a8c:	2f e5       	ldi	r18, 0x5F	; 95
 a8e:	2c 93       	st	X, r18
	
	strcpy(word,words[randomNumber]);
	int length=strlen(word);
	int i;
	
	for( i = 0; i < length; i++) {
 a90:	01 96       	adiw	r24, 0x01	; 1
 a92:	8e 17       	cp	r24, r30
 a94:	9f 07       	cpc	r25, r31
 a96:	bc f3       	brlt	.-18     	; 0xa86 <startVjesala+0xda>
		lines[i] = '_';
	}
	lines[i] = '\0';
 a98:	fc 01       	movw	r30, r24
 a9a:	e6 50       	subi	r30, 0x06	; 6
 a9c:	fe 4f       	sbci	r31, 0xFE	; 254
 a9e:	10 82       	st	Z, r1
	
	mainScreen();
 aa0:	0e 94 cc 03 	call	0x798	; 0x798 <mainScreen>
	
	while(1) {
		
		
		//letter(pressedKey());
		letter(check_direction());
 aa4:	0e 94 49 00 	call	0x92	; 0x92 <check_direction>
 aa8:	0e 94 83 04 	call	0x906	; 0x906 <letter>
 aac:	2f ef       	ldi	r18, 0xFF	; 255
 aae:	8f ef       	ldi	r24, 0xFF	; 255
 ab0:	98 e0       	ldi	r25, 0x08	; 8
 ab2:	21 50       	subi	r18, 0x01	; 1
 ab4:	80 40       	sbci	r24, 0x00	; 0
 ab6:	90 40       	sbci	r25, 0x00	; 0
 ab8:	e1 f7       	brne	.-8      	; 0xab2 <startVjesala+0x106>
 aba:	00 c0       	rjmp	.+0      	; 0xabc <startVjesala+0x110>
 abc:	00 00       	nop
 abe:	f2 cf       	rjmp	.-28     	; 0xaa4 <startVjesala+0xf8>

00000ac0 <__divmodhi4>:
 ac0:	97 fb       	bst	r25, 7
 ac2:	07 2e       	mov	r0, r23
 ac4:	16 f4       	brtc	.+4      	; 0xaca <__divmodhi4+0xa>
 ac6:	00 94       	com	r0
 ac8:	07 d0       	rcall	.+14     	; 0xad8 <__divmodhi4_neg1>
 aca:	77 fd       	sbrc	r23, 7
 acc:	09 d0       	rcall	.+18     	; 0xae0 <__divmodhi4_neg2>
 ace:	0e 94 74 05 	call	0xae8	; 0xae8 <__udivmodhi4>
 ad2:	07 fc       	sbrc	r0, 7
 ad4:	05 d0       	rcall	.+10     	; 0xae0 <__divmodhi4_neg2>
 ad6:	3e f4       	brtc	.+14     	; 0xae6 <__divmodhi4_exit>

00000ad8 <__divmodhi4_neg1>:
 ad8:	90 95       	com	r25
 ada:	81 95       	neg	r24
 adc:	9f 4f       	sbci	r25, 0xFF	; 255
 ade:	08 95       	ret

00000ae0 <__divmodhi4_neg2>:
 ae0:	70 95       	com	r23
 ae2:	61 95       	neg	r22
 ae4:	7f 4f       	sbci	r23, 0xFF	; 255

00000ae6 <__divmodhi4_exit>:
 ae6:	08 95       	ret

00000ae8 <__udivmodhi4>:
 ae8:	aa 1b       	sub	r26, r26
 aea:	bb 1b       	sub	r27, r27
 aec:	51 e1       	ldi	r21, 0x11	; 17
 aee:	07 c0       	rjmp	.+14     	; 0xafe <__udivmodhi4_ep>

00000af0 <__udivmodhi4_loop>:
 af0:	aa 1f       	adc	r26, r26
 af2:	bb 1f       	adc	r27, r27
 af4:	a6 17       	cp	r26, r22
 af6:	b7 07       	cpc	r27, r23
 af8:	10 f0       	brcs	.+4      	; 0xafe <__udivmodhi4_ep>
 afa:	a6 1b       	sub	r26, r22
 afc:	b7 0b       	sbc	r27, r23

00000afe <__udivmodhi4_ep>:
 afe:	88 1f       	adc	r24, r24
 b00:	99 1f       	adc	r25, r25
 b02:	5a 95       	dec	r21
 b04:	a9 f7       	brne	.-22     	; 0xaf0 <__udivmodhi4_loop>
 b06:	80 95       	com	r24
 b08:	90 95       	com	r25
 b0a:	bc 01       	movw	r22, r24
 b0c:	cd 01       	movw	r24, r26
 b0e:	08 95       	ret

00000b10 <strcpy>:
 b10:	fb 01       	movw	r30, r22
 b12:	dc 01       	movw	r26, r24
 b14:	01 90       	ld	r0, Z+
 b16:	0d 92       	st	X+, r0
 b18:	00 20       	and	r0, r0
 b1a:	e1 f7       	brne	.-8      	; 0xb14 <strcpy+0x4>
 b1c:	08 95       	ret

00000b1e <strstr>:
 b1e:	fb 01       	movw	r30, r22
 b20:	51 91       	ld	r21, Z+
 b22:	55 23       	and	r21, r21
 b24:	a9 f0       	breq	.+42     	; 0xb50 <strstr+0x32>
 b26:	bf 01       	movw	r22, r30
 b28:	dc 01       	movw	r26, r24
 b2a:	4d 91       	ld	r20, X+
 b2c:	45 17       	cp	r20, r21
 b2e:	41 11       	cpse	r20, r1
 b30:	e1 f7       	brne	.-8      	; 0xb2a <strstr+0xc>
 b32:	59 f4       	brne	.+22     	; 0xb4a <strstr+0x2c>
 b34:	cd 01       	movw	r24, r26
 b36:	01 90       	ld	r0, Z+
 b38:	00 20       	and	r0, r0
 b3a:	49 f0       	breq	.+18     	; 0xb4e <strstr+0x30>
 b3c:	4d 91       	ld	r20, X+
 b3e:	40 15       	cp	r20, r0
 b40:	41 11       	cpse	r20, r1
 b42:	c9 f3       	breq	.-14     	; 0xb36 <strstr+0x18>
 b44:	fb 01       	movw	r30, r22
 b46:	41 11       	cpse	r20, r1
 b48:	ef cf       	rjmp	.-34     	; 0xb28 <strstr+0xa>
 b4a:	81 e0       	ldi	r24, 0x01	; 1
 b4c:	90 e0       	ldi	r25, 0x00	; 0
 b4e:	01 97       	sbiw	r24, 0x01	; 1
 b50:	08 95       	ret

00000b52 <_exit>:
 b52:	f8 94       	cli

00000b54 <__stop_program>:
 b54:	ff cf       	rjmp	.-2      	; 0xb54 <__stop_program>
